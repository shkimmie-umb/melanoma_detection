Fri 01 Mar 2024 05:32:04 AM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['_7_point_criteria']
IMG_SIZE: [150, 150]
CLASSIFIER: EfficientNetB3
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
efficientnetb3 (Functional)  (None, 1536)              10783535  
_________________________________________________________________
dense (Dense)                (None, 512)               786944    
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 11,705,393
Trainable params: 920,322
Non-trainable params: 10,785,071
_________________________________________________________________
Fitting _7_point_criteria_aug_EfficientNetB3_150h_150w_None model...
model_name: _7_point_criteria_aug_EfficientNetB3_150h_150w_None
Epoch: 1 loss: 0.8462 accuracy: 0.6423 val_loss: 0.6319 val_accuracy: 0.6502
Epoch: 2 loss: 0.7587 accuracy: 0.6922 val_loss: 0.6199 val_accuracy: 0.6749
Epoch: 3 loss: 0.6437 accuracy: 0.7005 val_loss: 0.5886 val_accuracy: 0.7143
Epoch: 4 loss: 0.5803 accuracy: 0.7587 val_loss: 0.5805 val_accuracy: 0.7143
Epoch: 5 loss: 0.5349 accuracy: 0.7720 val_loss: 0.5720 val_accuracy: 0.7143
Epoch: 6 loss: 0.4632 accuracy: 0.7820 val_loss: 0.5650 val_accuracy: 0.7340
Epoch: 7 loss: 0.4061 accuracy: 0.8253 val_loss: 0.5667 val_accuracy: 0.7241
Epoch: 8 loss: 0.4438 accuracy: 0.8037 val_loss: 0.5835 val_accuracy: 0.7291
Epoch: 9 loss: 0.3277 accuracy: 0.8470 val_loss: 0.5797 val_accuracy: 0.7340
Epoch: 10 loss: 0.3537 accuracy: 0.8453 val_loss: 0.5632 val_accuracy: 0.7340
Epoch: 11 loss: 0.3559 accuracy: 0.8403 val_loss: 0.5749 val_accuracy: 0.7537
Epoch: 12 loss: 0.2947 accuracy: 0.8702 val_loss: 0.5777 val_accuracy: 0.7586
Epoch: 13 loss: 0.2737 accuracy: 0.8852 val_loss: 0.5971 val_accuracy: 0.7537
Epoch: 14 loss: 0.3006 accuracy: 0.8619 val_loss: 0.6093 val_accuracy: 0.7537
Epoch: 15 loss: 0.2768 accuracy: 0.8835 val_loss: 0.6134 val_accuracy: 0.7488
Epoch: 16 loss: 0.2785 accuracy: 0.8902 val_loss: 0.5973 val_accuracy: 0.7488
Epoch: 17 loss: 0.2334 accuracy: 0.9002 val_loss: 0.5949 val_accuracy: 0.7438
Epoch: 18 loss: 0.2312 accuracy: 0.9035 val_loss: 0.6268 val_accuracy: 0.7389
Epoch: 19 loss: 0.2378 accuracy: 0.9151 val_loss: 0.6257 val_accuracy: 0.7438
Epoch: 20 loss: 0.2155 accuracy: 0.9151 val_loss: 0.6530 val_accuracy: 0.7438
Job ended!
