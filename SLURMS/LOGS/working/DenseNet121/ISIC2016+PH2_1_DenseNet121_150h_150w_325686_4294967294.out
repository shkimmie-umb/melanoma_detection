Thu 29 Feb 2024 01:27:08 PM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['ISIC2016', 'PH2']
IMG_SIZE: [150, 150]
CLASSIFIER: DenseNet121
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 2 dbs
Combining 2 db out of 2 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
densenet121 (Functional)     (None, 1024)              7037504   
_________________________________________________________________
dense (Dense)                (None, 512)               524800    
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 7,697,218
Trainable params: 658,178
Non-trainable params: 7,039,040
_________________________________________________________________
Fitting ISIC2016+PH2_aug_DenseNet121_150h_150w_None model...
model_name: ISIC2016+PH2_aug_DenseNet121_150h_150w_None
Epoch: 1 loss: 0.7901 accuracy: 0.6390 val_loss: 0.4878 val_accuracy: 0.8167
Epoch: 2 loss: 0.6113 accuracy: 0.7255 val_loss: 0.4492 val_accuracy: 0.7722
Epoch: 3 loss: 0.5349 accuracy: 0.7563 val_loss: 0.4482 val_accuracy: 0.7833
Epoch: 4 loss: 0.4902 accuracy: 0.7900 val_loss: 0.4444 val_accuracy: 0.7944
Epoch: 5 loss: 0.4707 accuracy: 0.7941 val_loss: 0.4477 val_accuracy: 0.7833
Epoch: 6 loss: 0.4076 accuracy: 0.8174 val_loss: 0.4622 val_accuracy: 0.8056
Epoch: 7 loss: 0.3551 accuracy: 0.8442 val_loss: 0.4756 val_accuracy: 0.8000
Epoch: 8 loss: 0.3809 accuracy: 0.8229 val_loss: 0.4908 val_accuracy: 0.8000
Epoch: 9 loss: 0.3337 accuracy: 0.8566 val_loss: 0.4829 val_accuracy: 0.8167
Epoch: 10 loss: 0.3145 accuracy: 0.8572 val_loss: 0.4911 val_accuracy: 0.8278
Epoch: 11 loss: 0.3343 accuracy: 0.8524 val_loss: 0.4926 val_accuracy: 0.8278
Epoch: 12 loss: 0.2798 accuracy: 0.8771 val_loss: 0.5049 val_accuracy: 0.8333
Epoch: 13 loss: 0.2511 accuracy: 0.9012 val_loss: 0.5168 val_accuracy: 0.8167
Epoch: 14 loss: 0.2521 accuracy: 0.8977 val_loss: 0.5212 val_accuracy: 0.8278
Epoch: 15 loss: 0.2572 accuracy: 0.8813 val_loss: 0.5155 val_accuracy: 0.8278
Epoch: 16 loss: 0.2194 accuracy: 0.9115 val_loss: 0.5330 val_accuracy: 0.8167
Epoch: 17 loss: 0.1987 accuracy: 0.9238 val_loss: 0.5545 val_accuracy: 0.8222
Epoch: 18 loss: 0.1883 accuracy: 0.9286 val_loss: 0.5434 val_accuracy: 0.8167
Epoch: 19 loss: 0.1897 accuracy: 0.9231 val_loss: 0.5386 val_accuracy: 0.8111
Epoch: 20 loss: 0.1850 accuracy: 0.9245 val_loss: 0.5627 val_accuracy: 0.8167
Job ended!
