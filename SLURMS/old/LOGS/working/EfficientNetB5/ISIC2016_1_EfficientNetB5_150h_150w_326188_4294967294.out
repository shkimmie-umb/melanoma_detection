Fri 01 Mar 2024 08:48:52 AM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['ISIC2016']
IMG_SIZE: [150, 150]
CLASSIFIER: EfficientNetB5
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
efficientnetb5 (Functional)  (None, 2048)              28513527  
_________________________________________________________________
dense (Dense)                (None, 512)               1049088   
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 29,697,529
Trainable params: 1,182,466
Non-trainable params: 28,515,063
_________________________________________________________________
Fitting ISIC2016_aug_EfficientNetB5_150h_150w_None model...
model_name: ISIC2016_aug_EfficientNetB5_150h_150w_None
Epoch: 1 loss: 0.8330 accuracy: 0.6305 val_loss: 0.5531 val_accuracy: 0.7944
Epoch: 2 loss: 0.6812 accuracy: 0.6843 val_loss: 0.5502 val_accuracy: 0.8000
Epoch: 3 loss: 0.6158 accuracy: 0.7155 val_loss: 0.5312 val_accuracy: 0.8167
Epoch: 4 loss: 0.5836 accuracy: 0.7294 val_loss: 0.4835 val_accuracy: 0.8056
Epoch: 5 loss: 0.5211 accuracy: 0.7658 val_loss: 0.5228 val_accuracy: 0.7611
Epoch: 6 loss: 0.5087 accuracy: 0.7632 val_loss: 0.4728 val_accuracy: 0.8000
Epoch: 7 loss: 0.4786 accuracy: 0.7745 val_loss: 0.4595 val_accuracy: 0.7833
Epoch: 8 loss: 0.5026 accuracy: 0.7632 val_loss: 0.4472 val_accuracy: 0.7944
Epoch: 9 loss: 0.4670 accuracy: 0.7927 val_loss: 0.4509 val_accuracy: 0.8000
Epoch: 10 loss: 0.4443 accuracy: 0.7936 val_loss: 0.4758 val_accuracy: 0.7778
Epoch: 11 loss: 0.4263 accuracy: 0.8144 val_loss: 0.4512 val_accuracy: 0.7889
Epoch: 12 loss: 0.4515 accuracy: 0.8014 val_loss: 0.4507 val_accuracy: 0.7944
Epoch: 13 loss: 0.4118 accuracy: 0.8049 val_loss: 0.4473 val_accuracy: 0.7944
Epoch: 14 loss: 0.4097 accuracy: 0.8257 val_loss: 0.4473 val_accuracy: 0.7944
Epoch: 15 loss: 0.3860 accuracy: 0.8352 val_loss: 0.4621 val_accuracy: 0.7778
Epoch: 16 loss: 0.3944 accuracy: 0.8326 val_loss: 0.4641 val_accuracy: 0.8111
Epoch: 17 loss: 0.3719 accuracy: 0.8361 val_loss: 0.5044 val_accuracy: 0.7667
Epoch: 18 loss: 0.3772 accuracy: 0.8326 val_loss: 0.5162 val_accuracy: 0.7444
Epoch: 19 loss: 0.3982 accuracy: 0.8231 val_loss: 0.5097 val_accuracy: 0.7500
Epoch: 20 loss: 0.3377 accuracy: 0.8569 val_loss: 0.5072 val_accuracy: 0.7889
Job ended!
