Fri 01 Mar 2024 04:12:13 AM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['ISIC2016']
IMG_SIZE: [150, 150]
CLASSIFIER: EfficientNetB2
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
efficientnetb2 (Functional)  (None, 1408)              7768569   
_________________________________________________________________
dense (Dense)                (None, 512)               721408    
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 8,624,891
Trainable params: 854,786
Non-trainable params: 7,770,105
_________________________________________________________________
Fitting ISIC2016_aug_EfficientNetB2_150h_150w_None model...
model_name: ISIC2016_aug_EfficientNetB2_150h_150w_None
Epoch: 1 loss: 0.8223 accuracy: 0.6470 val_loss: 0.4987 val_accuracy: 0.7889
Epoch: 2 loss: 0.6508 accuracy: 0.7051 val_loss: 0.4987 val_accuracy: 0.7722
Epoch: 3 loss: 0.6027 accuracy: 0.7346 val_loss: 0.5350 val_accuracy: 0.7611
Epoch: 4 loss: 0.5568 accuracy: 0.7424 val_loss: 0.5166 val_accuracy: 0.7722
Epoch: 5 loss: 0.5172 accuracy: 0.7710 val_loss: 0.5207 val_accuracy: 0.7333
Epoch: 6 loss: 0.4723 accuracy: 0.7814 val_loss: 0.4904 val_accuracy: 0.7500
Epoch: 7 loss: 0.4488 accuracy: 0.7780 val_loss: 0.4765 val_accuracy: 0.7556
Epoch: 8 loss: 0.4573 accuracy: 0.8023 val_loss: 0.4928 val_accuracy: 0.7389
Epoch: 9 loss: 0.4341 accuracy: 0.8144 val_loss: 0.4708 val_accuracy: 0.7722
Epoch: 10 loss: 0.4186 accuracy: 0.8167 val_loss: 0.4673 val_accuracy: 0.8000
Epoch: 11 loss: 0.3661 accuracy: 0.8491 val_loss: 0.4558 val_accuracy: 0.7833
Epoch: 12 loss: 0.3543 accuracy: 0.8395 val_loss: 0.4596 val_accuracy: 0.7778
Epoch: 13 loss: 0.3404 accuracy: 0.8552 val_loss: 0.4855 val_accuracy: 0.7889
Epoch: 14 loss: 0.3380 accuracy: 0.8569 val_loss: 0.4599 val_accuracy: 0.7944
Epoch: 15 loss: 0.2995 accuracy: 0.8725 val_loss: 0.5062 val_accuracy: 0.7944
Epoch: 16 loss: 0.3230 accuracy: 0.8612 val_loss: 0.4893 val_accuracy: 0.8111
Epoch: 17 loss: 0.3099 accuracy: 0.8716 val_loss: 0.5047 val_accuracy: 0.7667
Epoch: 18 loss: 0.2616 accuracy: 0.8864 val_loss: 0.4902 val_accuracy: 0.8056
Epoch: 19 loss: 0.3006 accuracy: 0.8604 val_loss: 0.4810 val_accuracy: 0.8111
Epoch: 20 loss: 0.2905 accuracy: 0.8794 val_loss: 0.4784 val_accuracy: 0.8111
Job ended!
