Fri 01 Mar 2024 10:40:58 AM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['ISIC2017']
IMG_SIZE: [150, 150]
CLASSIFIER: EfficientNetB5
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
efficientnetb5 (Functional)  (None, 2048)              28513527  
_________________________________________________________________
dense (Dense)                (None, 512)               1049088   
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 29,697,529
Trainable params: 1,182,466
Non-trainable params: 28,515,063
_________________________________________________________________
Fitting ISIC2017_aug_EfficientNetB5_150h_150w_None model...
model_name: ISIC2017_aug_EfficientNetB5_150h_150w_None
Epoch: 1 loss: 0.8210 accuracy: 0.6493 val_loss: 0.5368 val_accuracy: 0.8067
Epoch: 2 loss: 0.6614 accuracy: 0.7014 val_loss: 0.4900 val_accuracy: 0.8067
Epoch: 3 loss: 0.5810 accuracy: 0.7435 val_loss: 0.4323 val_accuracy: 0.8200
Epoch: 4 loss: 0.5616 accuracy: 0.7492 val_loss: 0.4318 val_accuracy: 0.8200
Epoch: 5 loss: 0.5221 accuracy: 0.7655 val_loss: 0.4201 val_accuracy: 0.8267
Epoch: 6 loss: 0.5060 accuracy: 0.7732 val_loss: 0.4373 val_accuracy: 0.8200
Epoch: 7 loss: 0.5018 accuracy: 0.7699 val_loss: 0.4353 val_accuracy: 0.8133
Epoch: 8 loss: 0.4997 accuracy: 0.7652 val_loss: 0.4674 val_accuracy: 0.8333
Epoch: 9 loss: 0.4826 accuracy: 0.7802 val_loss: 0.4618 val_accuracy: 0.8133
Epoch: 10 loss: 0.4688 accuracy: 0.7889 val_loss: 0.4035 val_accuracy: 0.8267
Epoch: 11 loss: 0.4409 accuracy: 0.7976 val_loss: 0.4761 val_accuracy: 0.8200
Epoch: 12 loss: 0.4497 accuracy: 0.7959 val_loss: 0.4476 val_accuracy: 0.8133
Epoch: 13 loss: 0.4194 accuracy: 0.8106 val_loss: 0.4832 val_accuracy: 0.8333
Epoch: 14 loss: 0.4260 accuracy: 0.8123 val_loss: 0.4617 val_accuracy: 0.8667
Epoch: 15 loss: 0.4204 accuracy: 0.8126 val_loss: 0.4825 val_accuracy: 0.8400
Epoch: 16 loss: 0.4226 accuracy: 0.8096 val_loss: 0.4927 val_accuracy: 0.8533
Epoch: 17 loss: 0.4131 accuracy: 0.8136 val_loss: 0.4796 val_accuracy: 0.8133
Epoch: 18 loss: 0.3939 accuracy: 0.8180 val_loss: 0.4788 val_accuracy: 0.8200
Epoch: 19 loss: 0.3808 accuracy: 0.8277 val_loss: 0.4963 val_accuracy: 0.8267
Epoch: 20 loss: 0.3767 accuracy: 0.8260 val_loss: 0.4864 val_accuracy: 0.8133
Job ended!
