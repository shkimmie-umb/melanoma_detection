Tue 27 Feb 2024 05:13:17 PM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['KaggleMB']
IMG_SIZE: [150, 150]
CLASSIFIER: EfficientNetB6
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
efficientnetb6 (Functional)  (None, 2304)              40960143  
_________________________________________________________________
dense (Dense)                (None, 512)               1180160   
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 42,275,217
Trainable params: 1,313,538
Non-trainable params: 40,961,679
_________________________________________________________________
Fitting KaggleMB_aug_EfficientNetB6_150h_150w_None model...
model_name: KaggleMB_aug_EfficientNetB6_150h_150w_None
Epoch: 1 loss: 0.6901 accuracy: 0.5421 val_loss: 0.7129 val_accuracy: 0.4337
Epoch: 2 loss: 0.6727 accuracy: 0.5875 val_loss: 0.7292 val_accuracy: 0.4337
Epoch: 3 loss: 0.6677 accuracy: 0.6035 val_loss: 0.7371 val_accuracy: 0.4337
Epoch: 4 loss: 0.6656 accuracy: 0.6132 val_loss: 0.7406 val_accuracy: 0.4337
Epoch: 5 loss: 0.6620 accuracy: 0.6135 val_loss: 0.7513 val_accuracy: 0.4337
Epoch: 6 loss: 0.6599 accuracy: 0.6106 val_loss: 0.7586 val_accuracy: 0.4337
Epoch: 7 loss: 0.6584 accuracy: 0.6100 val_loss: 0.7266 val_accuracy: 0.4337
Epoch: 8 loss: 0.6560 accuracy: 0.6152 val_loss: 0.7532 val_accuracy: 0.4337
Epoch: 9 loss: 0.6522 accuracy: 0.6132 val_loss: 0.7351 val_accuracy: 0.4337
Epoch: 10 loss: 0.6527 accuracy: 0.6240 val_loss: 0.7843 val_accuracy: 0.4337
Epoch: 11 loss: 0.6524 accuracy: 0.6183 val_loss: 0.6964 val_accuracy: 0.4337
Epoch: 12 loss: 0.6521 accuracy: 0.6232 val_loss: 0.6927 val_accuracy: 0.4337
Epoch: 13 loss: 0.6484 accuracy: 0.6246 val_loss: 0.6799 val_accuracy: 0.4886
Epoch: 14 loss: 0.6464 accuracy: 0.6283 val_loss: 0.6735 val_accuracy: 0.5341
Epoch: 15 loss: 0.6445 accuracy: 0.6312 val_loss: 0.7635 val_accuracy: 0.4337
Epoch: 16 loss: 0.6382 accuracy: 0.6320 val_loss: 0.7239 val_accuracy: 0.4337
Epoch: 17 loss: 0.6433 accuracy: 0.6332 val_loss: 0.7075 val_accuracy: 0.4337
Epoch: 18 loss: 0.6369 accuracy: 0.6375 val_loss: 0.6825 val_accuracy: 0.4545
Epoch: 19 loss: 0.6431 accuracy: 0.6326 val_loss: 0.8806 val_accuracy: 0.4337
Epoch: 20 loss: 0.6325 accuracy: 0.6552 val_loss: 0.7054 val_accuracy: 0.4337
Job ended!
