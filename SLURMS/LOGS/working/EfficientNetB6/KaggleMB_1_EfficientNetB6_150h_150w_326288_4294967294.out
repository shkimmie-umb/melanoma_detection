Fri 01 Mar 2024 12:58:55 PM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['KaggleMB']
IMG_SIZE: [150, 150]
CLASSIFIER: EfficientNetB6
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
efficientnetb6 (Functional)  (None, 2304)              40960143  
_________________________________________________________________
dense (Dense)                (None, 512)               1180160   
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 42,275,217
Trainable params: 1,313,538
Non-trainable params: 40,961,679
_________________________________________________________________
Fitting KaggleMB_aug_EfficientNetB6_150h_150w_None model...
model_name: KaggleMB_aug_EfficientNetB6_150h_150w_None
Epoch: 1 loss: 0.5937 accuracy: 0.7408 val_loss: 0.4549 val_accuracy: 0.7936
Epoch: 2 loss: 0.4492 accuracy: 0.8005 val_loss: 0.3955 val_accuracy: 0.8220
Epoch: 3 loss: 0.3921 accuracy: 0.8290 val_loss: 0.3510 val_accuracy: 0.8466
Epoch: 4 loss: 0.3837 accuracy: 0.8367 val_loss: 0.3650 val_accuracy: 0.8258
Epoch: 5 loss: 0.3489 accuracy: 0.8473 val_loss: 0.3819 val_accuracy: 0.8352
Epoch: 6 loss: 0.3270 accuracy: 0.8610 val_loss: 0.3681 val_accuracy: 0.8258
Epoch: 7 loss: 0.3136 accuracy: 0.8647 val_loss: 0.3617 val_accuracy: 0.8428
Epoch: 8 loss: 0.3046 accuracy: 0.8730 val_loss: 0.3580 val_accuracy: 0.8428
Epoch: 9 loss: 0.2901 accuracy: 0.8750 val_loss: 0.3678 val_accuracy: 0.8277
Epoch: 10 loss: 0.2849 accuracy: 0.8758 val_loss: 0.3432 val_accuracy: 0.8447
Epoch: 11 loss: 0.2691 accuracy: 0.8921 val_loss: 0.3573 val_accuracy: 0.8277
Epoch: 12 loss: 0.2636 accuracy: 0.8884 val_loss: 0.3876 val_accuracy: 0.8333
Epoch: 13 loss: 0.2546 accuracy: 0.8989 val_loss: 0.3710 val_accuracy: 0.8295
Epoch: 14 loss: 0.2582 accuracy: 0.8895 val_loss: 0.3499 val_accuracy: 0.8466
Epoch: 15 loss: 0.2610 accuracy: 0.8884 val_loss: 0.3285 val_accuracy: 0.8561
Epoch: 16 loss: 0.2457 accuracy: 0.8952 val_loss: 0.3558 val_accuracy: 0.8523
Epoch: 17 loss: 0.2288 accuracy: 0.9098 val_loss: 0.3596 val_accuracy: 0.8428
Epoch: 18 loss: 0.2220 accuracy: 0.9061 val_loss: 0.3535 val_accuracy: 0.8504
Epoch: 19 loss: 0.2391 accuracy: 0.8989 val_loss: 0.3586 val_accuracy: 0.8466
Epoch: 20 loss: 0.2205 accuracy: 0.9092 val_loss: 0.3712 val_accuracy: 0.8466
Job ended!
