Tue 27 Feb 2024 12:16:20 PM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['ISIC2017']
IMG_SIZE: [150, 150]
CLASSIFIER: EfficientNetB4
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
efficientnetb4 (Functional)  (None, 1792)              17673823  
_________________________________________________________________
dense (Dense)                (None, 512)               918016    
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 18,726,753
Trainable params: 1,051,394
Non-trainable params: 17,675,359
_________________________________________________________________
Fitting ISIC2017_aug_EfficientNetB4_150h_150w_None model...
model_name: ISIC2017_aug_EfficientNetB4_150h_150w_None
Epoch: 1 loss: 0.6868 accuracy: 0.5494 val_loss: 0.6361 val_accuracy: 0.8000
Epoch: 2 loss: 0.6610 accuracy: 0.6142 val_loss: 0.6023 val_accuracy: 0.8000
Epoch: 3 loss: 0.6612 accuracy: 0.6343 val_loss: 0.5813 val_accuracy: 0.8000
Epoch: 4 loss: 0.6525 accuracy: 0.6460 val_loss: 0.5673 val_accuracy: 0.8000
Epoch: 5 loss: 0.6518 accuracy: 0.6453 val_loss: 0.5643 val_accuracy: 0.8000
Epoch: 6 loss: 0.6537 accuracy: 0.6443 val_loss: 0.5537 val_accuracy: 0.8000
Epoch: 7 loss: 0.6482 accuracy: 0.6460 val_loss: 0.5475 val_accuracy: 0.8000
Epoch: 8 loss: 0.6501 accuracy: 0.6453 val_loss: 0.5595 val_accuracy: 0.8000
Epoch: 9 loss: 0.6499 accuracy: 0.6463 val_loss: 0.5426 val_accuracy: 0.8000
Epoch: 10 loss: 0.6470 accuracy: 0.6466 val_loss: 0.5482 val_accuracy: 0.8000
Epoch: 11 loss: 0.6484 accuracy: 0.6446 val_loss: 0.5936 val_accuracy: 0.8000
Epoch: 12 loss: 0.6495 accuracy: 0.6443 val_loss: 0.5712 val_accuracy: 0.8000
Epoch: 13 loss: 0.6511 accuracy: 0.6453 val_loss: 0.5870 val_accuracy: 0.8000
Epoch: 14 loss: 0.6505 accuracy: 0.6446 val_loss: 0.5535 val_accuracy: 0.8000
Epoch: 15 loss: 0.6492 accuracy: 0.6450 val_loss: 0.5556 val_accuracy: 0.8000
Epoch: 16 loss: 0.6512 accuracy: 0.6450 val_loss: 0.5566 val_accuracy: 0.8000
Epoch: 17 loss: 0.6498 accuracy: 0.6450 val_loss: 0.5613 val_accuracy: 0.8000
Epoch: 18 loss: 0.6512 accuracy: 0.6430 val_loss: 0.5521 val_accuracy: 0.8000
Epoch: 19 loss: 0.6495 accuracy: 0.6450 val_loss: 0.5623 val_accuracy: 0.8000
Epoch: 20 loss: 0.6488 accuracy: 0.6453 val_loss: 0.5449 val_accuracy: 0.8000
Job ended!
