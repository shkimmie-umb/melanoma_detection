Tue 27 Feb 2024 12:17:28 PM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['ISIC2019']
IMG_SIZE: [150, 150]
CLASSIFIER: EfficientNetB4
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
efficientnetb4 (Functional)  (None, 1792)              17673823  
_________________________________________________________________
dense (Dense)                (None, 512)               918016    
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 18,726,753
Trainable params: 1,051,394
Non-trainable params: 17,675,359
_________________________________________________________________
Fitting ISIC2019_aug_EfficientNetB4_150h_150w_None model...
model_name: ISIC2019_aug_EfficientNetB4_150h_150w_None
Epoch: 1 loss: 0.6604 accuracy: 0.6178 val_loss: 0.5755 val_accuracy: 0.8295
Epoch: 2 loss: 0.6515 accuracy: 0.6372 val_loss: 0.5283 val_accuracy: 0.8295
Epoch: 3 loss: 0.6487 accuracy: 0.6425 val_loss: 0.5246 val_accuracy: 0.8265
Epoch: 4 loss: 0.6465 accuracy: 0.6456 val_loss: 0.5477 val_accuracy: 0.8125
Epoch: 5 loss: 0.6441 accuracy: 0.6476 val_loss: 0.5490 val_accuracy: 0.8050
Epoch: 6 loss: 0.6444 accuracy: 0.6479 val_loss: 0.5173 val_accuracy: 0.8293
Epoch: 7 loss: 0.6427 accuracy: 0.6499 val_loss: 0.5372 val_accuracy: 0.8240
Epoch: 8 loss: 0.6427 accuracy: 0.6507 val_loss: 0.5216 val_accuracy: 0.8291
Epoch: 9 loss: 0.6429 accuracy: 0.6517 val_loss: 0.5670 val_accuracy: 0.8295
Epoch: 10 loss: 0.6417 accuracy: 0.6532 val_loss: 0.5194 val_accuracy: 0.8303
Epoch: 11 loss: 0.6418 accuracy: 0.6522 val_loss: 0.5402 val_accuracy: 0.8234
Epoch: 12 loss: 0.6423 accuracy: 0.6523 val_loss: 0.5308 val_accuracy: 0.8301
Epoch: 13 loss: 0.6419 accuracy: 0.6542 val_loss: 0.5064 val_accuracy: 0.8303
Epoch: 14 loss: 0.6416 accuracy: 0.6522 val_loss: 0.5369 val_accuracy: 0.8232
Epoch: 15 loss: 0.6418 accuracy: 0.6535 val_loss: 0.5420 val_accuracy: 0.8285
Epoch: 16 loss: 0.6419 accuracy: 0.6522 val_loss: 0.5438 val_accuracy: 0.8210
Epoch: 17 loss: 0.6411 accuracy: 0.6538 val_loss: 0.5530 val_accuracy: 0.8115
Epoch: 18 loss: 0.6413 accuracy: 0.6534 val_loss: 0.5217 val_accuracy: 0.8299
Epoch: 19 loss: 0.6414 accuracy: 0.6530 val_loss: 0.5357 val_accuracy: 0.8295
Epoch: 20 loss: 0.6421 accuracy: 0.6535 val_loss: 0.5203 val_accuracy: 0.8295
Job ended!
