Fri 01 Mar 2024 07:03:14 AM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['HAM10000']
IMG_SIZE: [150, 150]
CLASSIFIER: EfficientNetB4
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
efficientnetb4 (Functional)  (None, 1792)              17673823  
_________________________________________________________________
dense (Dense)                (None, 512)               918016    
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 18,726,753
Trainable params: 1,051,394
Non-trainable params: 17,675,359
_________________________________________________________________
Fitting HAM10000_aug_EfficientNetB4_150h_150w_None model...
model_name: HAM10000_aug_EfficientNetB4_150h_150w_None
Epoch: 1 loss: 0.6753 accuracy: 0.6890 val_loss: 0.2065 val_accuracy: 0.9400
Epoch: 2 loss: 0.5343 accuracy: 0.7571 val_loss: 0.1890 val_accuracy: 0.9354
Epoch: 3 loss: 0.4831 accuracy: 0.7830 val_loss: 0.1547 val_accuracy: 0.9456
Epoch: 4 loss: 0.4553 accuracy: 0.7953 val_loss: 0.1751 val_accuracy: 0.9400
Epoch: 5 loss: 0.4377 accuracy: 0.8035 val_loss: 0.1541 val_accuracy: 0.9490
Epoch: 6 loss: 0.4180 accuracy: 0.8096 val_loss: 0.1487 val_accuracy: 0.9536
Epoch: 7 loss: 0.4180 accuracy: 0.8135 val_loss: 0.1291 val_accuracy: 0.9581
Epoch: 8 loss: 0.3998 accuracy: 0.8196 val_loss: 0.1268 val_accuracy: 0.9604
Epoch: 9 loss: 0.3801 accuracy: 0.8352 val_loss: 0.1429 val_accuracy: 0.9604
Epoch: 10 loss: 0.3759 accuracy: 0.8298 val_loss: 0.1389 val_accuracy: 0.9570
Epoch: 11 loss: 0.3729 accuracy: 0.8322 val_loss: 0.1477 val_accuracy: 0.9490
Epoch: 12 loss: 0.3606 accuracy: 0.8410 val_loss: 0.1275 val_accuracy: 0.9581
Epoch: 13 loss: 0.3544 accuracy: 0.8412 val_loss: 0.1323 val_accuracy: 0.9558
Epoch: 14 loss: 0.3562 accuracy: 0.8406 val_loss: 0.1282 val_accuracy: 0.9592
Epoch: 15 loss: 0.3488 accuracy: 0.8459 val_loss: 0.1359 val_accuracy: 0.9592
Epoch: 16 loss: 0.3382 accuracy: 0.8468 val_loss: 0.1432 val_accuracy: 0.9513
Epoch: 17 loss: 0.3363 accuracy: 0.8497 val_loss: 0.1542 val_accuracy: 0.9479
Epoch: 18 loss: 0.3346 accuracy: 0.8534 val_loss: 0.1443 val_accuracy: 0.9524
Epoch: 19 loss: 0.3297 accuracy: 0.8569 val_loss: 0.1375 val_accuracy: 0.9524
Epoch: 20 loss: 0.3124 accuracy: 0.8631 val_loss: 0.1506 val_accuracy: 0.9479
Job ended!
