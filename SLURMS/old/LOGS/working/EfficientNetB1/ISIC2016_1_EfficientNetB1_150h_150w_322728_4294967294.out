Tue 27 Feb 2024 05:41:35 AM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['ISIC2016']
IMG_SIZE: [150, 150]
CLASSIFIER: EfficientNetB1
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
efficientnetb1 (Functional)  (None, 1280)              6575239   
_________________________________________________________________
dense (Dense)                (None, 512)               655872    
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 7,366,025
Trainable params: 789,250
Non-trainable params: 6,576,775
_________________________________________________________________
Fitting ISIC2016_aug_EfficientNetB1_150h_150w_None model...
model_name: ISIC2016_aug_EfficientNetB1_150h_150w_None
Epoch: 1 loss: 0.7005 accuracy: 0.4996 val_loss: 0.6788 val_accuracy: 0.8000
Epoch: 2 loss: 0.6917 accuracy: 0.5152 val_loss: 0.6642 val_accuracy: 0.8000
Epoch: 3 loss: 0.6917 accuracy: 0.5447 val_loss: 0.6472 val_accuracy: 0.8000
Epoch: 4 loss: 0.6813 accuracy: 0.5611 val_loss: 0.6358 val_accuracy: 0.8000
Epoch: 5 loss: 0.6834 accuracy: 0.5733 val_loss: 0.6267 val_accuracy: 0.8000
Epoch: 6 loss: 0.6744 accuracy: 0.5993 val_loss: 0.6201 val_accuracy: 0.8000
Epoch: 7 loss: 0.6738 accuracy: 0.6019 val_loss: 0.6126 val_accuracy: 0.8000
Epoch: 8 loss: 0.6774 accuracy: 0.5963 val_loss: 0.6059 val_accuracy: 0.8000
Epoch: 9 loss: 0.6684 accuracy: 0.6201 val_loss: 0.5953 val_accuracy: 0.8000
Epoch: 10 loss: 0.6692 accuracy: 0.6158 val_loss: 0.5924 val_accuracy: 0.8000
Epoch: 11 loss: 0.6702 accuracy: 0.6167 val_loss: 0.5935 val_accuracy: 0.8000
Epoch: 12 loss: 0.6712 accuracy: 0.6149 val_loss: 0.5907 val_accuracy: 0.8000
Epoch: 13 loss: 0.6680 accuracy: 0.6141 val_loss: 0.5876 val_accuracy: 0.8000
Epoch: 14 loss: 0.6686 accuracy: 0.6132 val_loss: 0.5923 val_accuracy: 0.8000
Epoch: 15 loss: 0.6659 accuracy: 0.6158 val_loss: 0.6062 val_accuracy: 0.8000
Epoch: 16 loss: 0.6690 accuracy: 0.6158 val_loss: 0.6006 val_accuracy: 0.8000
Epoch: 17 loss: 0.6702 accuracy: 0.6175 val_loss: 0.5905 val_accuracy: 0.8000
Epoch: 18 loss: 0.6693 accuracy: 0.6132 val_loss: 0.5889 val_accuracy: 0.8000
Epoch: 19 loss: 0.6709 accuracy: 0.6106 val_loss: 0.5719 val_accuracy: 0.8000
Epoch: 20 loss: 0.6670 accuracy: 0.6132 val_loss: 0.5643 val_accuracy: 0.8000
Job ended!
