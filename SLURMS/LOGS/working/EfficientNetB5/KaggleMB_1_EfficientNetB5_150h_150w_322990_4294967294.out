Tue 27 Feb 2024 02:37:21 PM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['KaggleMB']
IMG_SIZE: [150, 150]
CLASSIFIER: EfficientNetB5
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
efficientnetb5 (Functional)  (None, 2048)              28513527  
_________________________________________________________________
dense (Dense)                (None, 512)               1049088   
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 29,697,529
Trainable params: 1,182,466
Non-trainable params: 28,515,063
_________________________________________________________________
Fitting KaggleMB_aug_EfficientNetB5_150h_150w_None model...
model_name: KaggleMB_aug_EfficientNetB5_150h_150w_None
Epoch: 1 loss: 0.6868 accuracy: 0.5515 val_loss: 0.7121 val_accuracy: 0.4337
Epoch: 2 loss: 0.6641 accuracy: 0.6052 val_loss: 0.7279 val_accuracy: 0.4337
Epoch: 3 loss: 0.6473 accuracy: 0.6375 val_loss: 0.7463 val_accuracy: 0.4337
Epoch: 4 loss: 0.6290 accuracy: 0.6509 val_loss: 0.7401 val_accuracy: 0.4337
Epoch: 5 loss: 0.6168 accuracy: 0.6577 val_loss: 0.7168 val_accuracy: 0.4337
Epoch: 6 loss: 0.6103 accuracy: 0.6703 val_loss: 0.6622 val_accuracy: 0.5947
Epoch: 7 loss: 0.5989 accuracy: 0.6840 val_loss: 0.7945 val_accuracy: 0.4337
Epoch: 8 loss: 0.5858 accuracy: 0.6994 val_loss: 0.6901 val_accuracy: 0.4792
Epoch: 9 loss: 0.5932 accuracy: 0.6917 val_loss: 0.5861 val_accuracy: 0.7670
Epoch: 10 loss: 0.5918 accuracy: 0.6945 val_loss: 0.6291 val_accuracy: 0.6458
Epoch: 11 loss: 0.5930 accuracy: 0.6894 val_loss: 0.6218 val_accuracy: 0.6553
Epoch: 12 loss: 0.5858 accuracy: 0.7020 val_loss: 0.6241 val_accuracy: 0.6515
Epoch: 13 loss: 0.5779 accuracy: 0.7145 val_loss: 0.7180 val_accuracy: 0.4754
Epoch: 14 loss: 0.5760 accuracy: 0.7182 val_loss: 0.7147 val_accuracy: 0.4773
Epoch: 15 loss: 0.5814 accuracy: 0.7094 val_loss: 0.7757 val_accuracy: 0.4375
Epoch: 16 loss: 0.5716 accuracy: 0.7160 val_loss: 0.5460 val_accuracy: 0.7633
Epoch: 17 loss: 0.5679 accuracy: 0.7217 val_loss: 0.5980 val_accuracy: 0.7045
Epoch: 18 loss: 0.5716 accuracy: 0.7134 val_loss: 0.5869 val_accuracy: 0.7330
Epoch: 19 loss: 0.5783 accuracy: 0.7091 val_loss: 0.6041 val_accuracy: 0.6894
Epoch: 20 loss: 0.5618 accuracy: 0.7228 val_loss: 0.5303 val_accuracy: 0.7670
Job ended!
