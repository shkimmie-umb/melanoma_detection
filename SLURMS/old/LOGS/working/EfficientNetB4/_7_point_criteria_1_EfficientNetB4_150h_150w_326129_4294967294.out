Fri 01 Mar 2024 07:02:34 AM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['_7_point_criteria']
IMG_SIZE: [150, 150]
CLASSIFIER: EfficientNetB4
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
efficientnetb4 (Functional)  (None, 1792)              17673823  
_________________________________________________________________
dense (Dense)                (None, 512)               918016    
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 18,726,753
Trainable params: 1,051,394
Non-trainable params: 17,675,359
_________________________________________________________________
Fitting _7_point_criteria_aug_EfficientNetB4_150h_150w_None model...
model_name: _7_point_criteria_aug_EfficientNetB4_150h_150w_None
Epoch: 1 loss: 0.9435 accuracy: 0.5840 val_loss: 0.6607 val_accuracy: 0.5911
Epoch: 2 loss: 0.7046 accuracy: 0.6656 val_loss: 0.6664 val_accuracy: 0.5764
Epoch: 3 loss: 0.6053 accuracy: 0.7188 val_loss: 0.6711 val_accuracy: 0.5714
Epoch: 4 loss: 0.4965 accuracy: 0.7604 val_loss: 0.6627 val_accuracy: 0.6108
Epoch: 5 loss: 0.5063 accuracy: 0.7854 val_loss: 0.6562 val_accuracy: 0.6207
Epoch: 6 loss: 0.4935 accuracy: 0.7720 val_loss: 0.6750 val_accuracy: 0.5911
Epoch: 7 loss: 0.3950 accuracy: 0.8319 val_loss: 0.6454 val_accuracy: 0.6256
Epoch: 8 loss: 0.4003 accuracy: 0.8369 val_loss: 0.6172 val_accuracy: 0.6946
Epoch: 9 loss: 0.3636 accuracy: 0.8336 val_loss: 0.6471 val_accuracy: 0.6355
Epoch: 10 loss: 0.3301 accuracy: 0.8602 val_loss: 0.6516 val_accuracy: 0.6502
Epoch: 11 loss: 0.3458 accuracy: 0.8569 val_loss: 0.6470 val_accuracy: 0.6749
Epoch: 12 loss: 0.3611 accuracy: 0.8486 val_loss: 0.6471 val_accuracy: 0.6700
Epoch: 13 loss: 0.3078 accuracy: 0.8702 val_loss: 0.6234 val_accuracy: 0.7044
Epoch: 14 loss: 0.2885 accuracy: 0.8819 val_loss: 0.6200 val_accuracy: 0.7241
Epoch: 15 loss: 0.2896 accuracy: 0.8802 val_loss: 0.6340 val_accuracy: 0.7192
Epoch: 16 loss: 0.2625 accuracy: 0.8802 val_loss: 0.6514 val_accuracy: 0.7044
Epoch: 17 loss: 0.2470 accuracy: 0.9035 val_loss: 0.6779 val_accuracy: 0.6946
Epoch: 18 loss: 0.2461 accuracy: 0.9052 val_loss: 0.6668 val_accuracy: 0.7143
Epoch: 19 loss: 0.1994 accuracy: 0.9251 val_loss: 0.6797 val_accuracy: 0.7340
Epoch: 20 loss: 0.2395 accuracy: 0.9035 val_loss: 0.6820 val_accuracy: 0.7241
Job ended!
