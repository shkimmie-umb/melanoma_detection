Fri 01 Mar 2024 02:24:26 AM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['KaggleMB']
IMG_SIZE: [150, 150]
CLASSIFIER: EfficientNetB0
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
efficientnetb0 (Functional)  (None, 1280)              4049571   
_________________________________________________________________
dense (Dense)                (None, 512)               655872    
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 4,840,357
Trainable params: 789,250
Non-trainable params: 4,051,107
_________________________________________________________________
Fitting KaggleMB_aug_EfficientNetB0_150h_150w_None model...
model_name: KaggleMB_aug_EfficientNetB0_150h_150w_None
Epoch: 1 loss: 0.6319 accuracy: 0.7120 val_loss: 0.4419 val_accuracy: 0.8485
Epoch: 2 loss: 0.4118 accuracy: 0.8222 val_loss: 0.3822 val_accuracy: 0.8428
Epoch: 3 loss: 0.3623 accuracy: 0.8399 val_loss: 0.3384 val_accuracy: 0.8826
Epoch: 4 loss: 0.3406 accuracy: 0.8533 val_loss: 0.3417 val_accuracy: 0.8523
Epoch: 5 loss: 0.3047 accuracy: 0.8719 val_loss: 0.3559 val_accuracy: 0.8561
Epoch: 6 loss: 0.2931 accuracy: 0.8775 val_loss: 0.3390 val_accuracy: 0.8655
Epoch: 7 loss: 0.2775 accuracy: 0.8884 val_loss: 0.3358 val_accuracy: 0.8542
Epoch: 8 loss: 0.2560 accuracy: 0.8927 val_loss: 0.3543 val_accuracy: 0.8561
Epoch: 9 loss: 0.2469 accuracy: 0.8949 val_loss: 0.3586 val_accuracy: 0.8598
Epoch: 10 loss: 0.2312 accuracy: 0.9021 val_loss: 0.3263 val_accuracy: 0.8504
Epoch: 11 loss: 0.2283 accuracy: 0.9067 val_loss: 0.3268 val_accuracy: 0.8561
Epoch: 12 loss: 0.2195 accuracy: 0.9058 val_loss: 0.3456 val_accuracy: 0.8561
Epoch: 13 loss: 0.2159 accuracy: 0.9144 val_loss: 0.3343 val_accuracy: 0.8580
Epoch: 14 loss: 0.1899 accuracy: 0.9229 val_loss: 0.3506 val_accuracy: 0.8712
Epoch: 15 loss: 0.2030 accuracy: 0.9209 val_loss: 0.3598 val_accuracy: 0.8693
Epoch: 16 loss: 0.1838 accuracy: 0.9306 val_loss: 0.3420 val_accuracy: 0.8655
Epoch: 17 loss: 0.1645 accuracy: 0.9323 val_loss: 0.3206 val_accuracy: 0.8750
Epoch: 18 loss: 0.1647 accuracy: 0.9323 val_loss: 0.3407 val_accuracy: 0.8902
Epoch: 19 loss: 0.1745 accuracy: 0.9315 val_loss: 0.3652 val_accuracy: 0.8769
Epoch: 20 loss: 0.1697 accuracy: 0.9358 val_loss: 0.3626 val_accuracy: 0.8750
Job ended!
