Mon 26 Feb 2024 08:49:42 PM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID:  1
DB: ['KaggleMB']
IMG_SIZE: [150, 150]
CLASSIFIER: DenseNet121
SELF_AUG: 0
JOB_INDEX: 1
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
densenet121 (Functional)     (None, 1024)              7037504   
_________________________________________________________________
dense (Dense)                (None, 512)               524800    
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 7,697,218
Trainable params: 658,178
Non-trainable params: 7,039,040
_________________________________________________________________
Fitting KaggleMB_noaug_DenseNet121_150h_150w_1 model...
model_name: KaggleMB_noaug_DenseNet121_150h_150w_1
Epoch: 1 loss: 0.6866 accuracy: 0.6846 val_loss: 0.6793 val_accuracy: 0.7481
Epoch: 2 loss: 0.5876 accuracy: 0.7352 val_loss: 0.6809 val_accuracy: 0.4375
Epoch: 3 loss: 0.5543 accuracy: 0.7564 val_loss: 0.6803 val_accuracy: 0.4337
Epoch: 4 loss: 0.5383 accuracy: 0.7569 val_loss: 0.6622 val_accuracy: 0.4886
Epoch: 5 loss: 0.5284 accuracy: 0.7626 val_loss: 0.6181 val_accuracy: 0.6780
Epoch: 6 loss: 0.5005 accuracy: 0.7747 val_loss: 0.6117 val_accuracy: 0.6477
Epoch: 7 loss: 0.5120 accuracy: 0.7617 val_loss: 0.5186 val_accuracy: 0.7898
Epoch: 8 loss: 0.4948 accuracy: 0.7665 val_loss: 0.4726 val_accuracy: 0.7841
Epoch: 9 loss: 0.4945 accuracy: 0.7732 val_loss: 0.4755 val_accuracy: 0.7822
Epoch: 10 loss: 0.5011 accuracy: 0.7636 val_loss: 0.4421 val_accuracy: 0.7917
Epoch: 11 loss: 0.4700 accuracy: 0.7800 val_loss: 0.3966 val_accuracy: 0.8049
Epoch: 12 loss: 0.4865 accuracy: 0.7703 val_loss: 0.4102 val_accuracy: 0.8049
Epoch: 13 loss: 0.4729 accuracy: 0.7814 val_loss: 0.3997 val_accuracy: 0.8163
Epoch: 14 loss: 0.4490 accuracy: 0.7838 val_loss: 0.3765 val_accuracy: 0.8258
Epoch: 15 loss: 0.4618 accuracy: 0.7906 val_loss: 0.3942 val_accuracy: 0.8144
Epoch: 16 loss: 0.4479 accuracy: 0.7959 val_loss: 0.4022 val_accuracy: 0.8201
Epoch: 17 loss: 0.4424 accuracy: 0.7963 val_loss: 0.3851 val_accuracy: 0.8106
Epoch: 18 loss: 0.4615 accuracy: 0.7771 val_loss: 0.3792 val_accuracy: 0.8258
Epoch: 19 loss: 0.4450 accuracy: 0.7824 val_loss: 0.3755 val_accuracy: 0.8277
Epoch: 20 loss: 0.4533 accuracy: 0.7886 val_loss: 0.3850 val_accuracy: 0.8201
Job ended!
