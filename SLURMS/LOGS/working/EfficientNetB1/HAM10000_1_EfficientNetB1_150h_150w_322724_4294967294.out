Tue 27 Feb 2024 05:39:54 AM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['HAM10000']
IMG_SIZE: [150, 150]
CLASSIFIER: EfficientNetB1
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
efficientnetb1 (Functional)  (None, 1280)              6575239   
_________________________________________________________________
dense (Dense)                (None, 512)               655872    
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 7,366,025
Trainable params: 789,250
Non-trainable params: 6,576,775
_________________________________________________________________
Fitting HAM10000_aug_EfficientNetB1_150h_150w_None model...
model_name: HAM10000_aug_EfficientNetB1_150h_150w_None
Epoch: 1 loss: 0.6399 accuracy: 0.6645 val_loss: 0.4267 val_accuracy: 0.9694
Epoch: 2 loss: 0.6068 accuracy: 0.7074 val_loss: 0.4249 val_accuracy: 0.9694
Epoch: 3 loss: 0.6055 accuracy: 0.7071 val_loss: 0.4154 val_accuracy: 0.9694
Epoch: 4 loss: 0.6049 accuracy: 0.7074 val_loss: 0.3697 val_accuracy: 0.9694
Epoch: 5 loss: 0.6042 accuracy: 0.7075 val_loss: 0.3725 val_accuracy: 0.9694
Epoch: 6 loss: 0.6032 accuracy: 0.7074 val_loss: 0.3810 val_accuracy: 0.9694
Epoch: 7 loss: 0.6032 accuracy: 0.7077 val_loss: 0.4209 val_accuracy: 0.9694
Epoch: 8 loss: 0.6024 accuracy: 0.7074 val_loss: 0.3626 val_accuracy: 0.9694
Epoch: 9 loss: 0.6014 accuracy: 0.7076 val_loss: 0.3994 val_accuracy: 0.9694
Epoch: 10 loss: 0.6005 accuracy: 0.7075 val_loss: 0.4574 val_accuracy: 0.9694
Epoch: 11 loss: 0.6005 accuracy: 0.7074 val_loss: 0.3426 val_accuracy: 0.9694
Epoch: 12 loss: 0.5985 accuracy: 0.7077 val_loss: 0.3433 val_accuracy: 0.9694
Epoch: 13 loss: 0.5975 accuracy: 0.7081 val_loss: 0.4158 val_accuracy: 0.9694
Epoch: 14 loss: 0.5979 accuracy: 0.7097 val_loss: 0.3997 val_accuracy: 0.9694
Epoch: 15 loss: 0.5958 accuracy: 0.7114 val_loss: 0.4059 val_accuracy: 0.9694
Epoch: 16 loss: 0.5960 accuracy: 0.7092 val_loss: 0.3154 val_accuracy: 0.9694
Epoch: 17 loss: 0.5932 accuracy: 0.7125 val_loss: 0.3493 val_accuracy: 0.9694
Epoch: 18 loss: 0.5961 accuracy: 0.7118 val_loss: 0.3542 val_accuracy: 0.9694
Epoch: 19 loss: 0.5917 accuracy: 0.7147 val_loss: 0.3763 val_accuracy: 0.9694
Epoch: 20 loss: 0.5915 accuracy: 0.7163 val_loss: 0.3828 val_accuracy: 0.9694
Job ended!
