Tue 27 Feb 2024 02:40:18 PM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['HAM10000']
IMG_SIZE: [150, 150]
CLASSIFIER: EfficientNetB6
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
efficientnetb6 (Functional)  (None, 2304)              40960143  
_________________________________________________________________
dense (Dense)                (None, 512)               1180160   
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 42,275,217
Trainable params: 1,313,538
Non-trainable params: 40,961,679
_________________________________________________________________
Fitting HAM10000_aug_EfficientNetB6_150h_150w_None model...
model_name: HAM10000_aug_EfficientNetB6_150h_150w_None
Epoch: 1 loss: 0.6308 accuracy: 0.6673 val_loss: 0.4166 val_accuracy: 0.9694
Epoch: 2 loss: 0.5905 accuracy: 0.7076 val_loss: 0.3573 val_accuracy: 0.9694
Epoch: 3 loss: 0.5882 accuracy: 0.7073 val_loss: 0.3866 val_accuracy: 0.9694
Epoch: 4 loss: 0.5843 accuracy: 0.7083 val_loss: 0.2673 val_accuracy: 0.9694
Epoch: 5 loss: 0.5832 accuracy: 0.7068 val_loss: 0.2866 val_accuracy: 0.9694
Epoch: 6 loss: 0.5792 accuracy: 0.7079 val_loss: 0.2527 val_accuracy: 0.9694
Epoch: 7 loss: 0.5766 accuracy: 0.7080 val_loss: 0.4858 val_accuracy: 0.9694
Epoch: 8 loss: 0.5755 accuracy: 0.7094 val_loss: 0.2281 val_accuracy: 0.9694
Epoch: 9 loss: 0.5745 accuracy: 0.7086 val_loss: 0.3379 val_accuracy: 0.9694
Epoch: 10 loss: 0.5782 accuracy: 0.7074 val_loss: 0.4193 val_accuracy: 0.9694
Epoch: 11 loss: 0.5774 accuracy: 0.7074 val_loss: 0.2439 val_accuracy: 0.9694
Epoch: 12 loss: 0.5716 accuracy: 0.7063 val_loss: 0.3402 val_accuracy: 0.9694
Epoch: 13 loss: 0.5730 accuracy: 0.7063 val_loss: 0.2209 val_accuracy: 0.9694
Epoch: 14 loss: 0.5755 accuracy: 0.7070 val_loss: 0.2969 val_accuracy: 0.9694
Epoch: 15 loss: 0.5733 accuracy: 0.7067 val_loss: 0.3470 val_accuracy: 0.9694
Epoch: 16 loss: 0.5695 accuracy: 0.7056 val_loss: 0.2410 val_accuracy: 0.9694
Epoch: 17 loss: 0.5750 accuracy: 0.7066 val_loss: 0.2548 val_accuracy: 0.9694
Epoch: 18 loss: 0.5694 accuracy: 0.7069 val_loss: 0.2580 val_accuracy: 0.9694
Epoch: 19 loss: 0.5694 accuracy: 0.7066 val_loss: 0.2249 val_accuracy: 0.9694
Epoch: 20 loss: 0.5693 accuracy: 0.7036 val_loss: 0.3038 val_accuracy: 0.9694
Job ended!
