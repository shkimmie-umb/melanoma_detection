Fri 01 Mar 2024 06:59:42 AM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['KaggleMB']
IMG_SIZE: [150, 150]
CLASSIFIER: EfficientNetB3
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
efficientnetb3 (Functional)  (None, 1536)              10783535  
_________________________________________________________________
dense (Dense)                (None, 512)               786944    
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 11,705,393
Trainable params: 920,322
Non-trainable params: 10,785,071
_________________________________________________________________
Fitting KaggleMB_aug_EfficientNetB3_150h_150w_None model...
model_name: KaggleMB_aug_EfficientNetB3_150h_150w_None
Epoch: 1 loss: 0.6143 accuracy: 0.7248 val_loss: 0.4372 val_accuracy: 0.8314
Epoch: 2 loss: 0.4555 accuracy: 0.8016 val_loss: 0.3593 val_accuracy: 0.8428
Epoch: 3 loss: 0.3851 accuracy: 0.8359 val_loss: 0.3318 val_accuracy: 0.8542
Epoch: 4 loss: 0.3672 accuracy: 0.8379 val_loss: 0.3214 val_accuracy: 0.8542
Epoch: 5 loss: 0.3233 accuracy: 0.8644 val_loss: 0.3187 val_accuracy: 0.8523
Epoch: 6 loss: 0.3224 accuracy: 0.8607 val_loss: 0.3201 val_accuracy: 0.8580
Epoch: 7 loss: 0.2991 accuracy: 0.8678 val_loss: 0.2995 val_accuracy: 0.8655
Epoch: 8 loss: 0.2707 accuracy: 0.8835 val_loss: 0.3038 val_accuracy: 0.8636
Epoch: 9 loss: 0.2697 accuracy: 0.8904 val_loss: 0.3205 val_accuracy: 0.8580
Epoch: 10 loss: 0.2521 accuracy: 0.8907 val_loss: 0.3145 val_accuracy: 0.8466
Epoch: 11 loss: 0.2491 accuracy: 0.8958 val_loss: 0.3091 val_accuracy: 0.8655
Epoch: 12 loss: 0.2351 accuracy: 0.8992 val_loss: 0.3190 val_accuracy: 0.8598
Epoch: 13 loss: 0.2296 accuracy: 0.9041 val_loss: 0.3123 val_accuracy: 0.8617
Epoch: 14 loss: 0.2156 accuracy: 0.9129 val_loss: 0.3112 val_accuracy: 0.8617
Epoch: 15 loss: 0.2018 accuracy: 0.9204 val_loss: 0.3116 val_accuracy: 0.8523
Epoch: 16 loss: 0.2121 accuracy: 0.9138 val_loss: 0.3208 val_accuracy: 0.8542
Epoch: 17 loss: 0.1935 accuracy: 0.9169 val_loss: 0.3223 val_accuracy: 0.8580
Epoch: 18 loss: 0.2038 accuracy: 0.9166 val_loss: 0.3065 val_accuracy: 0.8542
Epoch: 19 loss: 0.1835 accuracy: 0.9258 val_loss: 0.3332 val_accuracy: 0.8504
Epoch: 20 loss: 0.1851 accuracy: 0.9226 val_loss: 0.3063 val_accuracy: 0.8731
Job ended!
