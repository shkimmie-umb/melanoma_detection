nohup: ignoring input
2024-09-30 14:17:11.242617: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2024-09-30 14:17:11.274145: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX512F AVX512_VNNI AVX512_BF16 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
/homes/e35889/software/micromamba/envs/ood/lib/python3.10/site-packages/torchvision/transforms/v2/_deprecated.py:42: UserWarning: The transform `ToTensor()` is deprecated and will be removed in a future release. Instead, please use `v2.Compose([v2.ToImage(), v2.ToDtype(torch.float32, scale=True)])`.Output is equivalent up to float precision.
  warnings.warn(
/homes/e35889/software/micromamba/envs/ood/lib/python3.10/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=DenseNet201_Weights.IMAGENET1K_V1`. You can also use `weights=DenseNet201_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
  0%|          | 0/312 [00:00<?, ?it/s]  0%|          | 0/312 [00:01<?, ?it/s]
Traceback (most recent call last):
  File "/homes/e35889/sansa/melanoma_detection/train_pytorch.py", line 192, in <module>
    model_ft = mel.Model.train_model(conf=CFG, network=model_ft, data=dataloaders, dataset_sizes=dataset_sizes)
  File "/homes/e35889/sansa/melanoma_detection/melanoma/model.py", line 88, in train_model
    outputs = network(inputs)
  File "/homes/e35889/software/micromamba/envs/ood/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/homes/e35889/software/micromamba/envs/ood/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/homes/e35889/software/micromamba/envs/ood/lib/python3.10/site-packages/torch/nn/parallel/data_parallel.py", line 184, in forward
    return self.module(*inputs[0], **module_kwargs[0])
  File "/homes/e35889/software/micromamba/envs/ood/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/homes/e35889/software/micromamba/envs/ood/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/homes/e35889/software/micromamba/envs/ood/lib/python3.10/site-packages/torchvision/models/densenet.py", line 213, in forward
    features = self.features(x)
  File "/homes/e35889/software/micromamba/envs/ood/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/homes/e35889/software/micromamba/envs/ood/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/homes/e35889/software/micromamba/envs/ood/lib/python3.10/site-packages/torch/nn/modules/container.py", line 219, in forward
    input = module(input)
  File "/homes/e35889/software/micromamba/envs/ood/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/homes/e35889/software/micromamba/envs/ood/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/homes/e35889/software/micromamba/envs/ood/lib/python3.10/site-packages/torchvision/models/densenet.py", line 122, in forward
    new_features = layer(features)
  File "/homes/e35889/software/micromamba/envs/ood/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/homes/e35889/software/micromamba/envs/ood/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/homes/e35889/software/micromamba/envs/ood/lib/python3.10/site-packages/torchvision/models/densenet.py", line 88, in forward
    bottleneck_output = self.bn_function(prev_features)
  File "/homes/e35889/software/micromamba/envs/ood/lib/python3.10/site-packages/torchvision/models/densenet.py", line 48, in bn_function
    concated_features = torch.cat(inputs, 1)
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 20.00 MiB. GPU 0 has a total capacity of 47.41 GiB of which 11.44 MiB is free. Process 856951 has 41.03 GiB memory in use. Including non-PyTorch memory, this process has 6.35 GiB memory in use. Of the allocated memory 5.69 GiB is allocated by PyTorch, and 183.00 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
