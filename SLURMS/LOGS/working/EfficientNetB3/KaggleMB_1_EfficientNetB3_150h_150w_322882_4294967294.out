Tue 27 Feb 2024 10:19:05 AM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['KaggleMB']
IMG_SIZE: [150, 150]
CLASSIFIER: EfficientNetB3
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
efficientnetb3 (Functional)  (None, 1536)              10783535  
_________________________________________________________________
dense (Dense)                (None, 512)               786944    
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 11,705,393
Trainable params: 920,322
Non-trainable params: 10,785,071
_________________________________________________________________
Fitting KaggleMB_aug_EfficientNetB3_150h_150w_None model...
model_name: KaggleMB_aug_EfficientNetB3_150h_150w_None
Epoch: 1 loss: 0.6927 accuracy: 0.5273 val_loss: 0.7129 val_accuracy: 0.4337
Epoch: 2 loss: 0.6754 accuracy: 0.5989 val_loss: 0.7289 val_accuracy: 0.4337
Epoch: 3 loss: 0.6702 accuracy: 0.6123 val_loss: 0.7403 val_accuracy: 0.4337
Epoch: 4 loss: 0.6707 accuracy: 0.6120 val_loss: 0.7413 val_accuracy: 0.4337
Epoch: 5 loss: 0.6689 accuracy: 0.6112 val_loss: 0.7556 val_accuracy: 0.4337
Epoch: 6 loss: 0.6685 accuracy: 0.6135 val_loss: 0.7364 val_accuracy: 0.4337
Epoch: 7 loss: 0.6693 accuracy: 0.6118 val_loss: 0.7234 val_accuracy: 0.4337
Epoch: 8 loss: 0.6689 accuracy: 0.6118 val_loss: 0.7476 val_accuracy: 0.4337
Epoch: 9 loss: 0.6684 accuracy: 0.6123 val_loss: 0.7380 val_accuracy: 0.4337
Epoch: 10 loss: 0.6682 accuracy: 0.6120 val_loss: 0.7430 val_accuracy: 0.4337
Epoch: 11 loss: 0.6673 accuracy: 0.6134 val_loss: 0.7544 val_accuracy: 0.4337
Epoch: 12 loss: 0.6683 accuracy: 0.6120 val_loss: 0.7476 val_accuracy: 0.4337
Epoch: 13 loss: 0.6682 accuracy: 0.6132 val_loss: 0.7424 val_accuracy: 0.4337
Epoch: 14 loss: 0.6673 accuracy: 0.6143 val_loss: 0.7471 val_accuracy: 0.4337
Epoch: 15 loss: 0.6666 accuracy: 0.6149 val_loss: 0.7468 val_accuracy: 0.4337
Epoch: 16 loss: 0.6680 accuracy: 0.6126 val_loss: 0.7542 val_accuracy: 0.4337
Epoch: 17 loss: 0.6677 accuracy: 0.6126 val_loss: 0.7520 val_accuracy: 0.4337
Epoch: 18 loss: 0.6679 accuracy: 0.6118 val_loss: 0.7520 val_accuracy: 0.4337
Epoch: 19 loss: 0.6683 accuracy: 0.6115 val_loss: 0.7583 val_accuracy: 0.4337
Epoch: 20 loss: 0.6675 accuracy: 0.6129 val_loss: 0.7531 val_accuracy: 0.4337
Job ended!
