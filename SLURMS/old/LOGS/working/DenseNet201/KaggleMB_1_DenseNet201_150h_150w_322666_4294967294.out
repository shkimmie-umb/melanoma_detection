Tue 27 Feb 2024 04:26:28 AM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['KaggleMB']
IMG_SIZE: [150, 150]
CLASSIFIER: DenseNet201
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
densenet201 (Functional)     (None, 1920)              18321984  
_________________________________________________________________
dense (Dense)                (None, 512)               983552    
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 19,440,450
Trainable params: 1,116,930
Non-trainable params: 18,323,520
_________________________________________________________________
Fitting KaggleMB_aug_DenseNet201_150h_150w_None model...
model_name: KaggleMB_aug_DenseNet201_150h_150w_None
Epoch: 1 loss: 0.6770 accuracy: 0.6857 val_loss: 0.6937 val_accuracy: 0.4337
Epoch: 2 loss: 0.5924 accuracy: 0.7431 val_loss: 0.6878 val_accuracy: 0.4394
Epoch: 3 loss: 0.5479 accuracy: 0.7511 val_loss: 0.6714 val_accuracy: 0.5170
Epoch: 4 loss: 0.5078 accuracy: 0.7716 val_loss: 0.7291 val_accuracy: 0.4754
Epoch: 5 loss: 0.5142 accuracy: 0.7696 val_loss: 0.4661 val_accuracy: 0.7879
Epoch: 6 loss: 0.4923 accuracy: 0.7779 val_loss: 0.4319 val_accuracy: 0.7973
Epoch: 7 loss: 0.4748 accuracy: 0.7976 val_loss: 0.6257 val_accuracy: 0.6837
Epoch: 8 loss: 0.4573 accuracy: 0.7993 val_loss: 0.5161 val_accuracy: 0.7803
Epoch: 9 loss: 0.4510 accuracy: 0.8084 val_loss: 0.4187 val_accuracy: 0.8106
Epoch: 10 loss: 0.4502 accuracy: 0.8090 val_loss: 0.5794 val_accuracy: 0.7538
Epoch: 11 loss: 0.4523 accuracy: 0.7982 val_loss: 0.4078 val_accuracy: 0.8106
Epoch: 12 loss: 0.4352 accuracy: 0.8099 val_loss: 0.5736 val_accuracy: 0.7576
Epoch: 13 loss: 0.4326 accuracy: 0.8119 val_loss: 0.4223 val_accuracy: 0.8106
Epoch: 14 loss: 0.4320 accuracy: 0.8113 val_loss: 0.5060 val_accuracy: 0.7992
Epoch: 15 loss: 0.4329 accuracy: 0.8073 val_loss: 0.4024 val_accuracy: 0.7992
Epoch: 16 loss: 0.4266 accuracy: 0.8139 val_loss: 0.6134 val_accuracy: 0.7348
Epoch: 17 loss: 0.4210 accuracy: 0.8213 val_loss: 0.4514 val_accuracy: 0.7898
Epoch: 18 loss: 0.4182 accuracy: 0.8204 val_loss: 0.6215 val_accuracy: 0.6875
Epoch: 19 loss: 0.4249 accuracy: 0.8190 val_loss: 0.5597 val_accuracy: 0.7746
Epoch: 20 loss: 0.4224 accuracy: 0.8153 val_loss: 1.0047 val_accuracy: 0.4678
Job ended!
