Fri 01 Mar 2024 10:44:35 AM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['PAD_UFES_20']
IMG_SIZE: [150, 150]
CLASSIFIER: EfficientNetB5
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
efficientnetb5 (Functional)  (None, 2048)              28513527  
_________________________________________________________________
dense (Dense)                (None, 512)               1049088   
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 29,697,529
Trainable params: 1,182,466
Non-trainable params: 28,515,063
_________________________________________________________________
Fitting PAD_UFES_20_aug_EfficientNetB5_150h_150w_None model...
model_name: PAD_UFES_20_aug_EfficientNetB5_150h_150w_None
Epoch: 1 loss: 0.7886 accuracy: 0.6390 val_loss: 0.3861 val_accuracy: 0.9674
Epoch: 2 loss: 0.5860 accuracy: 0.7318 val_loss: 0.3605 val_accuracy: 0.9630
Epoch: 3 loss: 0.4906 accuracy: 0.7844 val_loss: 0.2753 val_accuracy: 0.9609
Epoch: 4 loss: 0.4325 accuracy: 0.8164 val_loss: 0.2705 val_accuracy: 0.9543
Epoch: 5 loss: 0.3812 accuracy: 0.8421 val_loss: 0.2029 val_accuracy: 0.9674
Epoch: 6 loss: 0.3531 accuracy: 0.8569 val_loss: 0.2328 val_accuracy: 0.9543
Epoch: 7 loss: 0.3055 accuracy: 0.8901 val_loss: 0.2016 val_accuracy: 0.9587
Epoch: 8 loss: 0.2784 accuracy: 0.8975 val_loss: 0.1861 val_accuracy: 0.9587
Epoch: 9 loss: 0.2507 accuracy: 0.9107 val_loss: 0.1876 val_accuracy: 0.9565
Epoch: 10 loss: 0.2494 accuracy: 0.9181 val_loss: 0.1577 val_accuracy: 0.9674
Epoch: 11 loss: 0.2215 accuracy: 0.9197 val_loss: 0.1710 val_accuracy: 0.9652
Epoch: 12 loss: 0.2034 accuracy: 0.9271 val_loss: 0.2041 val_accuracy: 0.9543
Epoch: 13 loss: 0.2046 accuracy: 0.9248 val_loss: 0.1401 val_accuracy: 0.9739
Epoch: 14 loss: 0.1897 accuracy: 0.9294 val_loss: 0.1516 val_accuracy: 0.9652
Epoch: 15 loss: 0.1882 accuracy: 0.9392 val_loss: 0.1367 val_accuracy: 0.9739
Epoch: 16 loss: 0.1559 accuracy: 0.9478 val_loss: 0.1304 val_accuracy: 0.9696
Epoch: 17 loss: 0.1601 accuracy: 0.9442 val_loss: 0.1435 val_accuracy: 0.9696
Epoch: 18 loss: 0.1567 accuracy: 0.9450 val_loss: 0.1484 val_accuracy: 0.9696
Epoch: 19 loss: 0.1691 accuracy: 0.9392 val_loss: 0.1252 val_accuracy: 0.9739
Epoch: 20 loss: 0.1375 accuracy: 0.9528 val_loss: 0.1289 val_accuracy: 0.9739
Job ended!
