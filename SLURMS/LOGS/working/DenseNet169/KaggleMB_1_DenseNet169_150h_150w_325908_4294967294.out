Fri 01 Mar 2024 12:39:17 AM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['KaggleMB']
IMG_SIZE: [150, 150]
CLASSIFIER: DenseNet169
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
densenet169 (Functional)     (None, 1664)              12642880  
_________________________________________________________________
dense (Dense)                (None, 512)               852480    
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 13,630,274
Trainable params: 985,858
Non-trainable params: 12,644,416
_________________________________________________________________
Fitting KaggleMB_aug_DenseNet169_150h_150w_None model...
model_name: KaggleMB_aug_DenseNet169_150h_150w_None
Epoch: 1 loss: 0.6434 accuracy: 0.7291 val_loss: 0.3804 val_accuracy: 0.8220
Epoch: 2 loss: 0.4295 accuracy: 0.8242 val_loss: 0.3431 val_accuracy: 0.8523
Epoch: 3 loss: 0.3727 accuracy: 0.8427 val_loss: 0.3280 val_accuracy: 0.8504
Epoch: 4 loss: 0.3196 accuracy: 0.8690 val_loss: 0.3313 val_accuracy: 0.8580
Epoch: 5 loss: 0.2820 accuracy: 0.8832 val_loss: 0.3332 val_accuracy: 0.8807
Epoch: 6 loss: 0.2591 accuracy: 0.8912 val_loss: 0.3393 val_accuracy: 0.8580
Epoch: 7 loss: 0.2303 accuracy: 0.9044 val_loss: 0.3315 val_accuracy: 0.8617
Epoch: 8 loss: 0.2193 accuracy: 0.9044 val_loss: 0.3158 val_accuracy: 0.8769
Epoch: 9 loss: 0.1993 accuracy: 0.9181 val_loss: 0.3168 val_accuracy: 0.8731
Epoch: 10 loss: 0.1822 accuracy: 0.9244 val_loss: 0.3285 val_accuracy: 0.8693
Epoch: 11 loss: 0.1771 accuracy: 0.9301 val_loss: 0.3232 val_accuracy: 0.8807
Epoch: 12 loss: 0.1477 accuracy: 0.9435 val_loss: 0.3254 val_accuracy: 0.8674
Epoch: 13 loss: 0.1230 accuracy: 0.9518 val_loss: 0.3246 val_accuracy: 0.8731
Epoch: 14 loss: 0.1315 accuracy: 0.9469 val_loss: 0.3582 val_accuracy: 0.8769
Epoch: 15 loss: 0.1231 accuracy: 0.9500 val_loss: 0.3204 val_accuracy: 0.8883
Epoch: 16 loss: 0.1094 accuracy: 0.9578 val_loss: 0.3281 val_accuracy: 0.8712
Epoch: 17 loss: 0.0971 accuracy: 0.9609 val_loss: 0.3251 val_accuracy: 0.8750
Epoch: 18 loss: 0.0904 accuracy: 0.9677 val_loss: 0.3440 val_accuracy: 0.8693
Epoch: 19 loss: 0.0776 accuracy: 0.9726 val_loss: 0.3341 val_accuracy: 0.8826
Epoch: 20 loss: 0.0884 accuracy: 0.9663 val_loss: 0.3309 val_accuracy: 0.8826
Job ended!
