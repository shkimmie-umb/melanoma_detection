Tue 27 Feb 2024 10:25:47 AM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['ISIC2016']
IMG_SIZE: [150, 150]
CLASSIFIER: EfficientNetB4
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
efficientnetb4 (Functional)  (None, 1792)              17673823  
_________________________________________________________________
dense (Dense)                (None, 512)               918016    
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 18,726,753
Trainable params: 1,051,394
Non-trainable params: 17,675,359
_________________________________________________________________
Fitting ISIC2016_aug_EfficientNetB4_150h_150w_None model...
model_name: ISIC2016_aug_EfficientNetB4_150h_150w_None
Epoch: 1 loss: 0.6928 accuracy: 0.5291 val_loss: 0.6729 val_accuracy: 0.8000
Epoch: 2 loss: 0.6970 accuracy: 0.5247 val_loss: 0.6540 val_accuracy: 0.8000
Epoch: 3 loss: 0.6863 accuracy: 0.5620 val_loss: 0.6417 val_accuracy: 0.8000
Epoch: 4 loss: 0.6797 accuracy: 0.5776 val_loss: 0.6318 val_accuracy: 0.8000
Epoch: 5 loss: 0.6796 accuracy: 0.5811 val_loss: 0.6217 val_accuracy: 0.8000
Epoch: 6 loss: 0.6810 accuracy: 0.5984 val_loss: 0.6129 val_accuracy: 0.8000
Epoch: 7 loss: 0.6691 accuracy: 0.6167 val_loss: 0.6053 val_accuracy: 0.8000
Epoch: 8 loss: 0.6731 accuracy: 0.6114 val_loss: 0.5990 val_accuracy: 0.8000
Epoch: 9 loss: 0.6731 accuracy: 0.6149 val_loss: 0.5902 val_accuracy: 0.8000
Epoch: 10 loss: 0.6684 accuracy: 0.6175 val_loss: 0.5863 val_accuracy: 0.8000
Epoch: 11 loss: 0.6708 accuracy: 0.6141 val_loss: 0.5745 val_accuracy: 0.8000
Epoch: 12 loss: 0.6687 accuracy: 0.6167 val_loss: 0.5758 val_accuracy: 0.8000
Epoch: 13 loss: 0.6713 accuracy: 0.6114 val_loss: 0.5716 val_accuracy: 0.8000
Epoch: 14 loss: 0.6687 accuracy: 0.6149 val_loss: 0.5743 val_accuracy: 0.8000
Epoch: 15 loss: 0.6670 accuracy: 0.6141 val_loss: 0.5809 val_accuracy: 0.8000
Epoch: 16 loss: 0.6671 accuracy: 0.6149 val_loss: 0.5855 val_accuracy: 0.8000
Epoch: 17 loss: 0.6665 accuracy: 0.6132 val_loss: 0.5986 val_accuracy: 0.8000
Epoch: 18 loss: 0.6669 accuracy: 0.6149 val_loss: 0.5820 val_accuracy: 0.8000
Epoch: 19 loss: 0.6675 accuracy: 0.6175 val_loss: 0.5877 val_accuracy: 0.8000
Epoch: 20 loss: 0.6680 accuracy: 0.6106 val_loss: 0.5863 val_accuracy: 0.8000
Job ended!
