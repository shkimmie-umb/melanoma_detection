Fri 01 Mar 2024 05:30:11 AM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['MEDNODE']
IMG_SIZE: [150, 150]
CLASSIFIER: EfficientNetB2
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
efficientnetb2 (Functional)  (None, 1408)              7768569   
_________________________________________________________________
dense (Dense)                (None, 512)               721408    
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 8,624,891
Trainable params: 854,786
Non-trainable params: 7,770,105
_________________________________________________________________
Fitting MEDNODE_aug_EfficientNetB2_150h_150w_None model...
model_name: MEDNODE_aug_EfficientNetB2_150h_150w_None
Epoch: 1 loss: 0.8294 accuracy: 0.5848 val_loss: 0.6036 val_accuracy: 0.7059
Epoch: 2 loss: 0.7569 accuracy: 0.6339 val_loss: 0.5620 val_accuracy: 0.7353
Epoch: 3 loss: 0.5673 accuracy: 0.7054 val_loss: 0.5336 val_accuracy: 0.7647
Epoch: 4 loss: 0.5632 accuracy: 0.7232 val_loss: 0.5135 val_accuracy: 0.7941
Epoch: 5 loss: 0.4937 accuracy: 0.7321 val_loss: 0.4982 val_accuracy: 0.7647
Epoch: 6 loss: 0.3784 accuracy: 0.7991 val_loss: 0.4869 val_accuracy: 0.7647
Epoch: 7 loss: 0.4189 accuracy: 0.8080 val_loss: 0.4740 val_accuracy: 0.7941
Epoch: 8 loss: 0.2797 accuracy: 0.8705 val_loss: 0.4604 val_accuracy: 0.7941
Epoch: 9 loss: 0.3291 accuracy: 0.8705 val_loss: 0.4481 val_accuracy: 0.8235
Epoch: 10 loss: 0.2728 accuracy: 0.8795 val_loss: 0.4399 val_accuracy: 0.8235
Epoch: 11 loss: 0.2723 accuracy: 0.9018 val_loss: 0.4323 val_accuracy: 0.8235
Epoch: 12 loss: 0.2532 accuracy: 0.8750 val_loss: 0.4234 val_accuracy: 0.8235
Epoch: 13 loss: 0.2650 accuracy: 0.8839 val_loss: 0.4142 val_accuracy: 0.7941
Epoch: 14 loss: 0.2141 accuracy: 0.9152 val_loss: 0.4050 val_accuracy: 0.8235
Epoch: 15 loss: 0.1989 accuracy: 0.9375 val_loss: 0.3973 val_accuracy: 0.8235
Epoch: 16 loss: 0.1849 accuracy: 0.9241 val_loss: 0.3934 val_accuracy: 0.8235
Epoch: 17 loss: 0.1884 accuracy: 0.9286 val_loss: 0.3865 val_accuracy: 0.8529
Epoch: 18 loss: 0.1701 accuracy: 0.9598 val_loss: 0.3783 val_accuracy: 0.8529
Epoch: 19 loss: 0.1781 accuracy: 0.9375 val_loss: 0.3713 val_accuracy: 0.8529
Epoch: 20 loss: 0.1743 accuracy: 0.9420 val_loss: 0.3618 val_accuracy: 0.8529
Job ended!
