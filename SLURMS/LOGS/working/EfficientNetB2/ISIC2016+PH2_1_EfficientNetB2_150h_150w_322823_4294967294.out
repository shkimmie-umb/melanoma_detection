Tue 27 Feb 2024 08:32:13 AM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['ISIC2016', 'PH2']
IMG_SIZE: [150, 150]
CLASSIFIER: EfficientNetB2
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 2 dbs
Combining 2 db out of 2 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
efficientnetb2 (Functional)  (None, 1408)              7768569   
_________________________________________________________________
dense (Dense)                (None, 512)               721408    
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 8,624,891
Trainable params: 854,786
Non-trainable params: 7,770,105
_________________________________________________________________
Fitting ISIC2016+PH2_aug_EfficientNetB2_150h_150w_None model...
model_name: ISIC2016+PH2_aug_EfficientNetB2_150h_150w_None
Epoch: 1 loss: 0.6919 accuracy: 0.5271 val_loss: 0.6638 val_accuracy: 0.8000
Epoch: 2 loss: 0.6858 accuracy: 0.5491 val_loss: 0.6425 val_accuracy: 0.8000
Epoch: 3 loss: 0.6795 accuracy: 0.5745 val_loss: 0.6248 val_accuracy: 0.8000
Epoch: 4 loss: 0.6718 accuracy: 0.5978 val_loss: 0.6146 val_accuracy: 0.8000
Epoch: 5 loss: 0.6696 accuracy: 0.6108 val_loss: 0.6050 val_accuracy: 0.8000
Epoch: 6 loss: 0.6652 accuracy: 0.6129 val_loss: 0.5999 val_accuracy: 0.8000
Epoch: 7 loss: 0.6599 accuracy: 0.6253 val_loss: 0.5909 val_accuracy: 0.8000
Epoch: 8 loss: 0.6603 accuracy: 0.6211 val_loss: 0.5842 val_accuracy: 0.8000
Epoch: 9 loss: 0.6624 accuracy: 0.6163 val_loss: 0.5936 val_accuracy: 0.8000
Epoch: 10 loss: 0.6595 accuracy: 0.6239 val_loss: 0.5839 val_accuracy: 0.8000
Epoch: 11 loss: 0.6619 accuracy: 0.6218 val_loss: 0.5857 val_accuracy: 0.8000
Epoch: 12 loss: 0.6605 accuracy: 0.6143 val_loss: 0.5966 val_accuracy: 0.8000
Epoch: 13 loss: 0.6614 accuracy: 0.6136 val_loss: 0.5851 val_accuracy: 0.8000
Epoch: 14 loss: 0.6592 accuracy: 0.6232 val_loss: 0.5780 val_accuracy: 0.8000
Epoch: 15 loss: 0.6567 accuracy: 0.6211 val_loss: 0.5560 val_accuracy: 0.8000
Epoch: 16 loss: 0.6567 accuracy: 0.6246 val_loss: 0.6145 val_accuracy: 0.8000
Epoch: 17 loss: 0.6535 accuracy: 0.6287 val_loss: 0.5576 val_accuracy: 0.8000
Epoch: 18 loss: 0.6573 accuracy: 0.6177 val_loss: 0.5467 val_accuracy: 0.8000
Epoch: 19 loss: 0.6582 accuracy: 0.6184 val_loss: 0.6119 val_accuracy: 0.8000
Epoch: 20 loss: 0.6548 accuracy: 0.6253 val_loss: 0.6153 val_accuracy: 0.8056
Job ended!
