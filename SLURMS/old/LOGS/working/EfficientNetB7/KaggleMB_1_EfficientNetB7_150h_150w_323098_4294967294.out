Tue 27 Feb 2024 08:23:16 PM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['KaggleMB']
IMG_SIZE: [150, 150]
CLASSIFIER: EfficientNetB7
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
efficientnetb7 (Functional)  (None, 2560)              64097687  
_________________________________________________________________
dense (Dense)                (None, 512)               1311232   
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 65,543,833
Trainable params: 1,444,610
Non-trainable params: 64,099,223
_________________________________________________________________
Fitting KaggleMB_aug_EfficientNetB7_150h_150w_None model...
model_name: KaggleMB_aug_EfficientNetB7_150h_150w_None
Epoch: 1 loss: 0.6863 accuracy: 0.5507 val_loss: 0.7139 val_accuracy: 0.4337
Epoch: 2 loss: 0.6658 accuracy: 0.5943 val_loss: 0.7305 val_accuracy: 0.4337
Epoch: 3 loss: 0.6553 accuracy: 0.6223 val_loss: 0.7511 val_accuracy: 0.4337
Epoch: 4 loss: 0.6543 accuracy: 0.6266 val_loss: 0.7537 val_accuracy: 0.4337
Epoch: 5 loss: 0.6499 accuracy: 0.6312 val_loss: 0.7781 val_accuracy: 0.4337
Epoch: 6 loss: 0.6512 accuracy: 0.6223 val_loss: 0.7300 val_accuracy: 0.4337
Epoch: 7 loss: 0.6509 accuracy: 0.6295 val_loss: 0.7410 val_accuracy: 0.4337
Epoch: 8 loss: 0.6456 accuracy: 0.6457 val_loss: 0.7187 val_accuracy: 0.4337
Epoch: 9 loss: 0.6398 accuracy: 0.6403 val_loss: 0.6685 val_accuracy: 0.4981
Epoch: 10 loss: 0.6371 accuracy: 0.6446 val_loss: 0.6765 val_accuracy: 0.4508
Epoch: 11 loss: 0.6342 accuracy: 0.6494 val_loss: 0.7395 val_accuracy: 0.4337
Epoch: 12 loss: 0.6369 accuracy: 0.6494 val_loss: 0.7104 val_accuracy: 0.4337
Epoch: 13 loss: 0.6419 accuracy: 0.6403 val_loss: 0.7475 val_accuracy: 0.4337
Epoch: 14 loss: 0.6386 accuracy: 0.6500 val_loss: 0.7564 val_accuracy: 0.4337
Epoch: 15 loss: 0.6340 accuracy: 0.6520 val_loss: 0.6835 val_accuracy: 0.4489
Epoch: 16 loss: 0.6280 accuracy: 0.6623 val_loss: 0.7449 val_accuracy: 0.4337
Epoch: 17 loss: 0.6263 accuracy: 0.6617 val_loss: 0.6953 val_accuracy: 0.4375
Epoch: 18 loss: 0.6306 accuracy: 0.6523 val_loss: 0.6865 val_accuracy: 0.4413
Epoch: 19 loss: 0.6241 accuracy: 0.6683 val_loss: 0.6575 val_accuracy: 0.5170
Epoch: 20 loss: 0.6225 accuracy: 0.6749 val_loss: 0.7074 val_accuracy: 0.4375
Job ended!
