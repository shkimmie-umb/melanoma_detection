Tue 27 Feb 2024 02:39:07 PM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['PAD_UFES_20']
IMG_SIZE: [150, 150]
CLASSIFIER: EfficientNetB5
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
efficientnetb5 (Functional)  (None, 2048)              28513527  
_________________________________________________________________
dense (Dense)                (None, 512)               1049088   
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 29,697,529
Trainable params: 1,182,466
Non-trainable params: 28,515,063
_________________________________________________________________
Fitting PAD_UFES_20_aug_EfficientNetB5_150h_150w_None model...
model_name: PAD_UFES_20_aug_EfficientNetB5_150h_150w_None
Epoch: 1 loss: 0.6675 accuracy: 0.6253 val_loss: 0.5972 val_accuracy: 0.9804
Epoch: 2 loss: 0.6037 accuracy: 0.7856 val_loss: 0.5076 val_accuracy: 0.9804
Epoch: 3 loss: 0.5495 accuracy: 0.8308 val_loss: 0.4241 val_accuracy: 0.9804
Epoch: 4 loss: 0.5098 accuracy: 0.8296 val_loss: 0.3560 val_accuracy: 0.9804
Epoch: 5 loss: 0.4790 accuracy: 0.8288 val_loss: 0.3009 val_accuracy: 0.9804
Epoch: 6 loss: 0.4613 accuracy: 0.8304 val_loss: 0.2806 val_accuracy: 0.9804
Epoch: 7 loss: 0.4573 accuracy: 0.8292 val_loss: 0.2490 val_accuracy: 0.9804
Epoch: 8 loss: 0.4528 accuracy: 0.8292 val_loss: 0.2332 val_accuracy: 0.9804
Epoch: 9 loss: 0.4480 accuracy: 0.8300 val_loss: 0.1894 val_accuracy: 0.9804
Epoch: 10 loss: 0.4496 accuracy: 0.8288 val_loss: 0.2387 val_accuracy: 0.9804
Epoch: 11 loss: 0.4483 accuracy: 0.8288 val_loss: 0.2613 val_accuracy: 0.9804
Epoch: 12 loss: 0.4503 accuracy: 0.8273 val_loss: 0.2162 val_accuracy: 0.9804
Epoch: 13 loss: 0.4510 accuracy: 0.8285 val_loss: 0.2414 val_accuracy: 0.9804
Epoch: 14 loss: 0.4437 accuracy: 0.8296 val_loss: 0.1857 val_accuracy: 0.9804
Epoch: 15 loss: 0.4466 accuracy: 0.8288 val_loss: 0.2116 val_accuracy: 0.9804
Epoch: 16 loss: 0.4413 accuracy: 0.8287 val_loss: 0.2072 val_accuracy: 0.9804
Epoch: 17 loss: 0.4483 accuracy: 0.8285 val_loss: 0.2376 val_accuracy: 0.9804
Epoch: 18 loss: 0.4481 accuracy: 0.8300 val_loss: 0.2471 val_accuracy: 0.9804
Epoch: 19 loss: 0.4404 accuracy: 0.8300 val_loss: 0.1715 val_accuracy: 0.9804
Epoch: 20 loss: 0.4466 accuracy: 0.8288 val_loss: 0.1809 val_accuracy: 0.9804
Job ended!
