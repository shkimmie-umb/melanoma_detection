Fri 01 Mar 2024 05:29:57 AM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['KaggleMB']
IMG_SIZE: [150, 150]
CLASSIFIER: EfficientNetB2
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
efficientnetb2 (Functional)  (None, 1408)              7768569   
_________________________________________________________________
dense (Dense)                (None, 512)               721408    
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 8,624,891
Trainable params: 854,786
Non-trainable params: 7,770,105
_________________________________________________________________
Fitting KaggleMB_aug_EfficientNetB2_150h_150w_None model...
model_name: KaggleMB_aug_EfficientNetB2_150h_150w_None
Epoch: 1 loss: 0.6150 accuracy: 0.7259 val_loss: 0.4709 val_accuracy: 0.7955
Epoch: 2 loss: 0.4341 accuracy: 0.8210 val_loss: 0.3913 val_accuracy: 0.8144
Epoch: 3 loss: 0.4009 accuracy: 0.8367 val_loss: 0.3672 val_accuracy: 0.8277
Epoch: 4 loss: 0.3599 accuracy: 0.8501 val_loss: 0.3528 val_accuracy: 0.8428
Epoch: 5 loss: 0.3081 accuracy: 0.8667 val_loss: 0.3702 val_accuracy: 0.8428
Epoch: 6 loss: 0.3149 accuracy: 0.8747 val_loss: 0.3655 val_accuracy: 0.8428
Epoch: 7 loss: 0.2951 accuracy: 0.8761 val_loss: 0.3523 val_accuracy: 0.8504
Epoch: 8 loss: 0.2734 accuracy: 0.8870 val_loss: 0.3734 val_accuracy: 0.8447
Epoch: 9 loss: 0.2563 accuracy: 0.8890 val_loss: 0.3687 val_accuracy: 0.8504
Epoch: 10 loss: 0.2603 accuracy: 0.8924 val_loss: 0.3558 val_accuracy: 0.8598
Epoch: 11 loss: 0.2501 accuracy: 0.8932 val_loss: 0.3703 val_accuracy: 0.8409
Epoch: 12 loss: 0.2015 accuracy: 0.9095 val_loss: 0.3507 val_accuracy: 0.8542
Epoch: 13 loss: 0.2096 accuracy: 0.9092 val_loss: 0.3675 val_accuracy: 0.8485
Epoch: 14 loss: 0.2113 accuracy: 0.9109 val_loss: 0.3475 val_accuracy: 0.8580
Epoch: 15 loss: 0.1952 accuracy: 0.9189 val_loss: 0.3357 val_accuracy: 0.8504
Epoch: 16 loss: 0.1923 accuracy: 0.9215 val_loss: 0.3605 val_accuracy: 0.8523
Epoch: 17 loss: 0.1833 accuracy: 0.9244 val_loss: 0.3472 val_accuracy: 0.8693
Epoch: 18 loss: 0.1859 accuracy: 0.9181 val_loss: 0.3597 val_accuracy: 0.8580
Epoch: 19 loss: 0.1829 accuracy: 0.9244 val_loss: 0.3705 val_accuracy: 0.8485
Epoch: 20 loss: 0.1657 accuracy: 0.9378 val_loss: 0.3737 val_accuracy: 0.8542
Job ended!
