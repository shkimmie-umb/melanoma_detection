Fri 01 Mar 2024 08:47:16 AM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['HAM10000']
IMG_SIZE: [150, 150]
CLASSIFIER: EfficientNetB5
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
efficientnetb5 (Functional)  (None, 2048)              28513527  
_________________________________________________________________
dense (Dense)                (None, 512)               1049088   
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 29,697,529
Trainable params: 1,182,466
Non-trainable params: 28,515,063
_________________________________________________________________
Fitting HAM10000_aug_EfficientNetB5_150h_150w_None model...
model_name: HAM10000_aug_EfficientNetB5_150h_150w_None
Epoch: 1 loss: 0.6690 accuracy: 0.6959 val_loss: 0.1875 val_accuracy: 0.9524
Epoch: 2 loss: 0.5149 accuracy: 0.7680 val_loss: 0.1925 val_accuracy: 0.9241
Epoch: 3 loss: 0.4725 accuracy: 0.7915 val_loss: 0.1812 val_accuracy: 0.9422
Epoch: 4 loss: 0.4536 accuracy: 0.7987 val_loss: 0.1205 val_accuracy: 0.9592
Epoch: 5 loss: 0.4316 accuracy: 0.8112 val_loss: 0.1199 val_accuracy: 0.9592
Epoch: 6 loss: 0.4230 accuracy: 0.8079 val_loss: 0.1204 val_accuracy: 0.9581
Epoch: 7 loss: 0.4156 accuracy: 0.8161 val_loss: 0.1223 val_accuracy: 0.9570
Epoch: 8 loss: 0.4032 accuracy: 0.8188 val_loss: 0.1260 val_accuracy: 0.9558
Epoch: 9 loss: 0.3928 accuracy: 0.8251 val_loss: 0.1174 val_accuracy: 0.9581
Epoch: 10 loss: 0.3909 accuracy: 0.8227 val_loss: 0.1294 val_accuracy: 0.9558
Epoch: 11 loss: 0.3784 accuracy: 0.8328 val_loss: 0.1327 val_accuracy: 0.9524
Epoch: 12 loss: 0.3702 accuracy: 0.8338 val_loss: 0.1192 val_accuracy: 0.9547
Epoch: 13 loss: 0.3685 accuracy: 0.8380 val_loss: 0.1196 val_accuracy: 0.9592
Epoch: 14 loss: 0.3589 accuracy: 0.8416 val_loss: 0.1116 val_accuracy: 0.9615
Epoch: 15 loss: 0.3549 accuracy: 0.8398 val_loss: 0.1301 val_accuracy: 0.9524
Epoch: 16 loss: 0.3550 accuracy: 0.8467 val_loss: 0.1103 val_accuracy: 0.9581
Epoch: 17 loss: 0.3397 accuracy: 0.8504 val_loss: 0.1157 val_accuracy: 0.9547
Epoch: 18 loss: 0.3487 accuracy: 0.8451 val_loss: 0.1466 val_accuracy: 0.9400
Epoch: 19 loss: 0.3400 accuracy: 0.8489 val_loss: 0.1308 val_accuracy: 0.9502
Epoch: 20 loss: 0.3398 accuracy: 0.8494 val_loss: 0.1370 val_accuracy: 0.9434
Job ended!
