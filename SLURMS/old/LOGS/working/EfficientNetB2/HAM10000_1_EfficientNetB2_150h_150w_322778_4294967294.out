Tue 27 Feb 2024 07:04:17 AM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['HAM10000']
IMG_SIZE: [150, 150]
CLASSIFIER: EfficientNetB2
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
efficientnetb2 (Functional)  (None, 1408)              7768569   
_________________________________________________________________
dense (Dense)                (None, 512)               721408    
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 8,624,891
Trainable params: 854,786
Non-trainable params: 7,770,105
_________________________________________________________________
Fitting HAM10000_aug_EfficientNetB2_150h_150w_None model...
model_name: HAM10000_aug_EfficientNetB2_150h_150w_None
Epoch: 1 loss: 0.6376 accuracy: 0.6657 val_loss: 0.4193 val_accuracy: 0.9694
Epoch: 2 loss: 0.6065 accuracy: 0.7074 val_loss: 0.3802 val_accuracy: 0.9694
Epoch: 3 loss: 0.6055 accuracy: 0.7074 val_loss: 0.3505 val_accuracy: 0.9694
Epoch: 4 loss: 0.6048 accuracy: 0.7077 val_loss: 0.3806 val_accuracy: 0.9694
Epoch: 5 loss: 0.6048 accuracy: 0.7075 val_loss: 0.3889 val_accuracy: 0.9694
Epoch: 6 loss: 0.6044 accuracy: 0.7076 val_loss: 0.3718 val_accuracy: 0.9694
Epoch: 7 loss: 0.6046 accuracy: 0.7077 val_loss: 0.3793 val_accuracy: 0.9694
Epoch: 8 loss: 0.6044 accuracy: 0.7078 val_loss: 0.3611 val_accuracy: 0.9694
Epoch: 9 loss: 0.6046 accuracy: 0.7076 val_loss: 0.3745 val_accuracy: 0.9694
Epoch: 10 loss: 0.6046 accuracy: 0.7074 val_loss: 0.3728 val_accuracy: 0.9694
Epoch: 11 loss: 0.6045 accuracy: 0.7075 val_loss: 0.3750 val_accuracy: 0.9694
Epoch: 12 loss: 0.6042 accuracy: 0.7079 val_loss: 0.3686 val_accuracy: 0.9694
Epoch: 13 loss: 0.6047 accuracy: 0.7073 val_loss: 0.3695 val_accuracy: 0.9694
Epoch: 14 loss: 0.6045 accuracy: 0.7075 val_loss: 0.3746 val_accuracy: 0.9694
Epoch: 15 loss: 0.6045 accuracy: 0.7076 val_loss: 0.3813 val_accuracy: 0.9694
Epoch: 16 loss: 0.6045 accuracy: 0.7074 val_loss: 0.3735 val_accuracy: 0.9694
Epoch: 17 loss: 0.6044 accuracy: 0.7077 val_loss: 0.3771 val_accuracy: 0.9694
Epoch: 18 loss: 0.6046 accuracy: 0.7074 val_loss: 0.3820 val_accuracy: 0.9694
Epoch: 19 loss: 0.6042 accuracy: 0.7079 val_loss: 0.3730 val_accuracy: 0.9694
Epoch: 20 loss: 0.6045 accuracy: 0.7076 val_loss: 0.3856 val_accuracy: 0.9694
Job ended!
