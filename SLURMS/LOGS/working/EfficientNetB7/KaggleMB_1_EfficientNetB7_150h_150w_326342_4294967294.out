Fri 01 Mar 2024 03:45:30 PM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['KaggleMB']
IMG_SIZE: [150, 150]
CLASSIFIER: EfficientNetB7
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
efficientnetb7 (Functional)  (None, 2560)              64097687  
_________________________________________________________________
dense (Dense)                (None, 512)               1311232   
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 65,543,833
Trainable params: 1,444,610
Non-trainable params: 64,099,223
_________________________________________________________________
Fitting KaggleMB_aug_EfficientNetB7_150h_150w_None model...
model_name: KaggleMB_aug_EfficientNetB7_150h_150w_None
Epoch: 1 loss: 0.6064 accuracy: 0.7382 val_loss: 0.4772 val_accuracy: 0.8125
Epoch: 2 loss: 0.4334 accuracy: 0.8162 val_loss: 0.3925 val_accuracy: 0.8258
Epoch: 3 loss: 0.4195 accuracy: 0.8242 val_loss: 0.3656 val_accuracy: 0.8239
Epoch: 4 loss: 0.3572 accuracy: 0.8456 val_loss: 0.3739 val_accuracy: 0.8390
Epoch: 5 loss: 0.3592 accuracy: 0.8516 val_loss: 0.3687 val_accuracy: 0.8428
Epoch: 6 loss: 0.3261 accuracy: 0.8604 val_loss: 0.3633 val_accuracy: 0.8371
Epoch: 7 loss: 0.3067 accuracy: 0.8693 val_loss: 0.3786 val_accuracy: 0.8295
Epoch: 8 loss: 0.3074 accuracy: 0.8744 val_loss: 0.4031 val_accuracy: 0.8352
Epoch: 9 loss: 0.2937 accuracy: 0.8790 val_loss: 0.3872 val_accuracy: 0.8561
Epoch: 10 loss: 0.2920 accuracy: 0.8798 val_loss: 0.3659 val_accuracy: 0.8485
Epoch: 11 loss: 0.2789 accuracy: 0.8832 val_loss: 0.3998 val_accuracy: 0.8258
Epoch: 12 loss: 0.2830 accuracy: 0.8792 val_loss: 0.4076 val_accuracy: 0.8277
Epoch: 13 loss: 0.2894 accuracy: 0.8787 val_loss: 0.3554 val_accuracy: 0.8466
Epoch: 14 loss: 0.2705 accuracy: 0.8901 val_loss: 0.3710 val_accuracy: 0.8504
Epoch: 15 loss: 0.2731 accuracy: 0.8847 val_loss: 0.3670 val_accuracy: 0.8447
Epoch: 16 loss: 0.2499 accuracy: 0.8904 val_loss: 0.3885 val_accuracy: 0.8561
Epoch: 17 loss: 0.2378 accuracy: 0.8992 val_loss: 0.3726 val_accuracy: 0.8466
Epoch: 18 loss: 0.2418 accuracy: 0.8989 val_loss: 0.3855 val_accuracy: 0.8333
Epoch: 19 loss: 0.2491 accuracy: 0.8964 val_loss: 0.4143 val_accuracy: 0.8295
Epoch: 20 loss: 0.2262 accuracy: 0.9035 val_loss: 0.3901 val_accuracy: 0.8485
Job ended!
