Tue 27 Feb 2024 08:36:49 AM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['MEDNODE']
IMG_SIZE: [150, 150]
CLASSIFIER: EfficientNetB2
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
efficientnetb2 (Functional)  (None, 1408)              7768569   
_________________________________________________________________
dense (Dense)                (None, 512)               721408    
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 8,624,891
Trainable params: 854,786
Non-trainable params: 7,770,105
_________________________________________________________________
Fitting MEDNODE_aug_EfficientNetB2_150h_150w_None model...
model_name: MEDNODE_aug_EfficientNetB2_150h_150w_None
Epoch: 1 loss: 0.6963 accuracy: 0.4777 val_loss: 0.6946 val_accuracy: 0.4118
Epoch: 2 loss: 0.6933 accuracy: 0.5223 val_loss: 0.6959 val_accuracy: 0.4118
Epoch: 3 loss: 0.7033 accuracy: 0.4554 val_loss: 0.6972 val_accuracy: 0.4118
Epoch: 4 loss: 0.6990 accuracy: 0.5312 val_loss: 0.6981 val_accuracy: 0.4118
Epoch: 5 loss: 0.6821 accuracy: 0.5446 val_loss: 0.6996 val_accuracy: 0.4118
Epoch: 6 loss: 0.6842 accuracy: 0.5536 val_loss: 0.7009 val_accuracy: 0.4118
Epoch: 7 loss: 0.6852 accuracy: 0.5714 val_loss: 0.7021 val_accuracy: 0.4118
Epoch: 8 loss: 0.6978 accuracy: 0.5357 val_loss: 0.7034 val_accuracy: 0.4118
Epoch: 9 loss: 0.6850 accuracy: 0.5536 val_loss: 0.7044 val_accuracy: 0.4118
Epoch: 10 loss: 0.6945 accuracy: 0.5268 val_loss: 0.7058 val_accuracy: 0.4118
Epoch: 11 loss: 0.6948 accuracy: 0.5179 val_loss: 0.7070 val_accuracy: 0.4118
Epoch: 12 loss: 0.6951 accuracy: 0.5446 val_loss: 0.7080 val_accuracy: 0.4118
Epoch: 13 loss: 0.7003 accuracy: 0.5089 val_loss: 0.7090 val_accuracy: 0.4118
Epoch: 14 loss: 0.6909 accuracy: 0.5223 val_loss: 0.7099 val_accuracy: 0.4118
Epoch: 15 loss: 0.6912 accuracy: 0.5134 val_loss: 0.7108 val_accuracy: 0.4118
Epoch: 16 loss: 0.6862 accuracy: 0.5089 val_loss: 0.7119 val_accuracy: 0.4118
Epoch: 17 loss: 0.6837 accuracy: 0.6027 val_loss: 0.7129 val_accuracy: 0.4118
Epoch: 18 loss: 0.7104 accuracy: 0.5089 val_loss: 0.7136 val_accuracy: 0.4118
Epoch: 19 loss: 0.6999 accuracy: 0.5223 val_loss: 0.7139 val_accuracy: 0.4118
Epoch: 20 loss: 0.6857 accuracy: 0.5759 val_loss: 0.7145 val_accuracy: 0.4118
Job ended!
