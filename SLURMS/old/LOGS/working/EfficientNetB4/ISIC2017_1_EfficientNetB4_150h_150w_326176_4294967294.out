Fri 01 Mar 2024 08:40:48 AM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['ISIC2017']
IMG_SIZE: [150, 150]
CLASSIFIER: EfficientNetB4
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
efficientnetb4 (Functional)  (None, 1792)              17673823  
_________________________________________________________________
dense (Dense)                (None, 512)               918016    
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 18,726,753
Trainable params: 1,051,394
Non-trainable params: 17,675,359
_________________________________________________________________
Fitting ISIC2017_aug_EfficientNetB4_150h_150w_None model...
model_name: ISIC2017_aug_EfficientNetB4_150h_150w_None
Epoch: 1 loss: 0.8325 accuracy: 0.6273 val_loss: 0.5210 val_accuracy: 0.8067
Epoch: 2 loss: 0.6442 accuracy: 0.7074 val_loss: 0.4867 val_accuracy: 0.7867
Epoch: 3 loss: 0.5882 accuracy: 0.7174 val_loss: 0.4654 val_accuracy: 0.7733
Epoch: 4 loss: 0.5410 accuracy: 0.7438 val_loss: 0.4323 val_accuracy: 0.8067
Epoch: 5 loss: 0.5318 accuracy: 0.7555 val_loss: 0.4013 val_accuracy: 0.8200
Epoch: 6 loss: 0.5017 accuracy: 0.7762 val_loss: 0.3959 val_accuracy: 0.8200
Epoch: 7 loss: 0.4662 accuracy: 0.7836 val_loss: 0.4250 val_accuracy: 0.8200
Epoch: 8 loss: 0.4470 accuracy: 0.7979 val_loss: 0.4243 val_accuracy: 0.8333
Epoch: 9 loss: 0.4288 accuracy: 0.8029 val_loss: 0.4368 val_accuracy: 0.8067
Epoch: 10 loss: 0.4339 accuracy: 0.8029 val_loss: 0.4245 val_accuracy: 0.8267
Epoch: 11 loss: 0.4085 accuracy: 0.8163 val_loss: 0.4411 val_accuracy: 0.8067
Epoch: 12 loss: 0.4130 accuracy: 0.8083 val_loss: 0.4742 val_accuracy: 0.8000
Epoch: 13 loss: 0.3906 accuracy: 0.8226 val_loss: 0.4713 val_accuracy: 0.8267
Epoch: 14 loss: 0.3926 accuracy: 0.8190 val_loss: 0.4546 val_accuracy: 0.8333
Epoch: 15 loss: 0.3869 accuracy: 0.8263 val_loss: 0.4565 val_accuracy: 0.8400
Epoch: 16 loss: 0.3802 accuracy: 0.8313 val_loss: 0.4897 val_accuracy: 0.7867
Epoch: 17 loss: 0.3459 accuracy: 0.8413 val_loss: 0.4664 val_accuracy: 0.8400
Epoch: 18 loss: 0.3645 accuracy: 0.8434 val_loss: 0.4780 val_accuracy: 0.8400
Epoch: 19 loss: 0.3302 accuracy: 0.8544 val_loss: 0.4888 val_accuracy: 0.8200
Epoch: 20 loss: 0.3404 accuracy: 0.8437 val_loss: 0.4975 val_accuracy: 0.8133
Job ended!
