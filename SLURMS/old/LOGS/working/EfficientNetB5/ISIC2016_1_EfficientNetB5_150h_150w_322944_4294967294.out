Tue 27 Feb 2024 12:24:30 PM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['ISIC2016']
IMG_SIZE: [150, 150]
CLASSIFIER: EfficientNetB5
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
efficientnetb5 (Functional)  (None, 2048)              28513527  
_________________________________________________________________
dense (Dense)                (None, 512)               1049088   
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 29,697,529
Trainable params: 1,182,466
Non-trainable params: 28,515,063
_________________________________________________________________
Fitting ISIC2016_aug_EfficientNetB5_150h_150w_None model...
model_name: ISIC2016_aug_EfficientNetB5_150h_150w_None
Epoch: 1 loss: 0.7010 accuracy: 0.5091 val_loss: 0.6665 val_accuracy: 0.8000
Epoch: 2 loss: 0.6880 accuracy: 0.5455 val_loss: 0.6527 val_accuracy: 0.8000
Epoch: 3 loss: 0.6834 accuracy: 0.5603 val_loss: 0.6367 val_accuracy: 0.8000
Epoch: 4 loss: 0.6823 accuracy: 0.5611 val_loss: 0.6283 val_accuracy: 0.8000
Epoch: 5 loss: 0.6711 accuracy: 0.5889 val_loss: 0.6218 val_accuracy: 0.8000
Epoch: 6 loss: 0.6731 accuracy: 0.6019 val_loss: 0.6138 val_accuracy: 0.8000
Epoch: 7 loss: 0.6732 accuracy: 0.5906 val_loss: 0.6050 val_accuracy: 0.8000
Epoch: 8 loss: 0.6749 accuracy: 0.6097 val_loss: 0.5995 val_accuracy: 0.8000
Epoch: 9 loss: 0.6643 accuracy: 0.6193 val_loss: 0.5947 val_accuracy: 0.8000
Epoch: 10 loss: 0.6735 accuracy: 0.6019 val_loss: 0.5900 val_accuracy: 0.8000
Epoch: 11 loss: 0.6638 accuracy: 0.6114 val_loss: 0.5841 val_accuracy: 0.8000
Epoch: 12 loss: 0.6641 accuracy: 0.6071 val_loss: 0.5792 val_accuracy: 0.8000
Epoch: 13 loss: 0.6646 accuracy: 0.6175 val_loss: 0.5851 val_accuracy: 0.8000
Epoch: 14 loss: 0.6711 accuracy: 0.6132 val_loss: 0.5866 val_accuracy: 0.8000
Epoch: 15 loss: 0.6693 accuracy: 0.6149 val_loss: 0.5838 val_accuracy: 0.8000
Epoch: 16 loss: 0.6675 accuracy: 0.6167 val_loss: 0.5842 val_accuracy: 0.8000
Epoch: 17 loss: 0.6666 accuracy: 0.6193 val_loss: 0.5934 val_accuracy: 0.8000
Epoch: 18 loss: 0.6688 accuracy: 0.6158 val_loss: 0.6030 val_accuracy: 0.8000
Epoch: 19 loss: 0.6652 accuracy: 0.6149 val_loss: 0.6004 val_accuracy: 0.8000
Epoch: 20 loss: 0.6637 accuracy: 0.6193 val_loss: 0.5953 val_accuracy: 0.8000
Job ended!
