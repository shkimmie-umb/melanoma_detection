Tue 27 Feb 2024 10:22:54 AM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['HAM10000']
IMG_SIZE: [150, 150]
CLASSIFIER: EfficientNetB4
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
efficientnetb4 (Functional)  (None, 1792)              17673823  
_________________________________________________________________
dense (Dense)                (None, 512)               918016    
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 18,726,753
Trainable params: 1,051,394
Non-trainable params: 17,675,359
_________________________________________________________________
Fitting HAM10000_aug_EfficientNetB4_150h_150w_None model...
model_name: HAM10000_aug_EfficientNetB4_150h_150w_None
Epoch: 1 loss: 0.6404 accuracy: 0.6671 val_loss: 0.4113 val_accuracy: 0.9694
Epoch: 2 loss: 0.6068 accuracy: 0.7073 val_loss: 0.3759 val_accuracy: 0.9694
Epoch: 3 loss: 0.6054 accuracy: 0.7075 val_loss: 0.3745 val_accuracy: 0.9694
Epoch: 4 loss: 0.6049 accuracy: 0.7073 val_loss: 0.3656 val_accuracy: 0.9694
Epoch: 5 loss: 0.6045 accuracy: 0.7079 val_loss: 0.3655 val_accuracy: 0.9694
Epoch: 6 loss: 0.6047 accuracy: 0.7074 val_loss: 0.3889 val_accuracy: 0.9694
Epoch: 7 loss: 0.6042 accuracy: 0.7079 val_loss: 0.3661 val_accuracy: 0.9694
Epoch: 8 loss: 0.6042 accuracy: 0.7073 val_loss: 0.3785 val_accuracy: 0.9694
Epoch: 9 loss: 0.6034 accuracy: 0.7079 val_loss: 0.3741 val_accuracy: 0.9694
Epoch: 10 loss: 0.6032 accuracy: 0.7074 val_loss: 0.3731 val_accuracy: 0.9694
Epoch: 11 loss: 0.6007 accuracy: 0.7074 val_loss: 0.3636 val_accuracy: 0.9694
Epoch: 12 loss: 0.6008 accuracy: 0.7078 val_loss: 0.3549 val_accuracy: 0.9694
Epoch: 13 loss: 0.6008 accuracy: 0.7076 val_loss: 0.3599 val_accuracy: 0.9694
Epoch: 14 loss: 0.6009 accuracy: 0.7074 val_loss: 0.3674 val_accuracy: 0.9694
Epoch: 15 loss: 0.5993 accuracy: 0.7074 val_loss: 0.3377 val_accuracy: 0.9694
Epoch: 16 loss: 0.5970 accuracy: 0.7102 val_loss: 0.3524 val_accuracy: 0.9694
Epoch: 17 loss: 0.5953 accuracy: 0.7107 val_loss: 0.2866 val_accuracy: 0.9694
Epoch: 18 loss: 0.5944 accuracy: 0.7118 val_loss: 0.3187 val_accuracy: 0.9694
Epoch: 19 loss: 0.5945 accuracy: 0.7106 val_loss: 0.2975 val_accuracy: 0.9694
Epoch: 20 loss: 0.5946 accuracy: 0.7119 val_loss: 0.3450 val_accuracy: 0.9694
Job ended!
