Fri 01 Mar 2024 02:34:11 AM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['_7_point_criteria']
IMG_SIZE: [150, 150]
CLASSIFIER: EfficientNetB1
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
efficientnetb1 (Functional)  (None, 1280)              6575239   
_________________________________________________________________
dense (Dense)                (None, 512)               655872    
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 7,366,025
Trainable params: 789,250
Non-trainable params: 6,576,775
_________________________________________________________________
Fitting _7_point_criteria_aug_EfficientNetB1_150h_150w_None model...
model_name: _7_point_criteria_aug_EfficientNetB1_150h_150w_None
Epoch: 1 loss: 0.8578 accuracy: 0.5874 val_loss: 0.6086 val_accuracy: 0.6897
Epoch: 2 loss: 0.7071 accuracy: 0.6905 val_loss: 0.6089 val_accuracy: 0.6749
Epoch: 3 loss: 0.5861 accuracy: 0.7221 val_loss: 0.6151 val_accuracy: 0.6404
Epoch: 4 loss: 0.5459 accuracy: 0.7488 val_loss: 0.6181 val_accuracy: 0.6404
Epoch: 5 loss: 0.5282 accuracy: 0.7621 val_loss: 0.6050 val_accuracy: 0.6305
Epoch: 6 loss: 0.5283 accuracy: 0.7837 val_loss: 0.5773 val_accuracy: 0.6847
Epoch: 7 loss: 0.4490 accuracy: 0.8170 val_loss: 0.5820 val_accuracy: 0.6798
Epoch: 8 loss: 0.4494 accuracy: 0.7903 val_loss: 0.5723 val_accuracy: 0.6798
Epoch: 9 loss: 0.4206 accuracy: 0.8037 val_loss: 0.5653 val_accuracy: 0.7340
Epoch: 10 loss: 0.4195 accuracy: 0.8059 val_loss: 0.5646 val_accuracy: 0.7241
Epoch: 11 loss: 0.3965 accuracy: 0.8236 val_loss: 0.5758 val_accuracy: 0.7094
Epoch: 12 loss: 0.3552 accuracy: 0.8519 val_loss: 0.5651 val_accuracy: 0.7192
Epoch: 13 loss: 0.3052 accuracy: 0.8719 val_loss: 0.5406 val_accuracy: 0.7340
Epoch: 14 loss: 0.3220 accuracy: 0.8453 val_loss: 0.5523 val_accuracy: 0.7389
Epoch: 15 loss: 0.3175 accuracy: 0.8769 val_loss: 0.5483 val_accuracy: 0.7586
Epoch: 16 loss: 0.2984 accuracy: 0.8752 val_loss: 0.5509 val_accuracy: 0.7389
Epoch: 17 loss: 0.2930 accuracy: 0.8769 val_loss: 0.5614 val_accuracy: 0.7291
Epoch: 18 loss: 0.2937 accuracy: 0.8719 val_loss: 0.5772 val_accuracy: 0.7291
Epoch: 19 loss: 0.2681 accuracy: 0.8652 val_loss: 0.5936 val_accuracy: 0.7192
Epoch: 20 loss: 0.2412 accuracy: 0.8985 val_loss: 0.6085 val_accuracy: 0.7094
Job ended!
