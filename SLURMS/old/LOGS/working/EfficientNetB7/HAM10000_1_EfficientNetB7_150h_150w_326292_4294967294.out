Fri 01 Mar 2024 01:03:09 PM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['HAM10000']
IMG_SIZE: [150, 150]
CLASSIFIER: EfficientNetB7
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
efficientnetb7 (Functional)  (None, 2560)              64097687  
_________________________________________________________________
dense (Dense)                (None, 512)               1311232   
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 65,543,833
Trainable params: 1,444,610
Non-trainable params: 64,099,223
_________________________________________________________________
Fitting HAM10000_aug_EfficientNetB7_150h_150w_None model...
model_name: HAM10000_aug_EfficientNetB7_150h_150w_None
Epoch: 1 loss: 0.6874 accuracy: 0.7017 val_loss: 0.2404 val_accuracy: 0.9309
Epoch: 2 loss: 0.5189 accuracy: 0.7697 val_loss: 0.2211 val_accuracy: 0.9241
Epoch: 3 loss: 0.4851 accuracy: 0.7872 val_loss: 0.1366 val_accuracy: 0.9558
Epoch: 4 loss: 0.4528 accuracy: 0.8014 val_loss: 0.1443 val_accuracy: 0.9547
Epoch: 5 loss: 0.4499 accuracy: 0.8020 val_loss: 0.1498 val_accuracy: 0.9502
Epoch: 6 loss: 0.4342 accuracy: 0.8106 val_loss: 0.1283 val_accuracy: 0.9490
Epoch: 7 loss: 0.4150 accuracy: 0.8162 val_loss: 0.1411 val_accuracy: 0.9479
Epoch: 8 loss: 0.4107 accuracy: 0.8164 val_loss: 0.1530 val_accuracy: 0.9434
Epoch: 9 loss: 0.4035 accuracy: 0.8207 val_loss: 0.1357 val_accuracy: 0.9536
Epoch: 10 loss: 0.3934 accuracy: 0.8259 val_loss: 0.1409 val_accuracy: 0.9513
Epoch: 11 loss: 0.3911 accuracy: 0.8272 val_loss: 0.1280 val_accuracy: 0.9502
Epoch: 12 loss: 0.3848 accuracy: 0.8325 val_loss: 0.1357 val_accuracy: 0.9570
Epoch: 13 loss: 0.3826 accuracy: 0.8317 val_loss: 0.1354 val_accuracy: 0.9502
Epoch: 14 loss: 0.3788 accuracy: 0.8328 val_loss: 0.1438 val_accuracy: 0.9445
Epoch: 15 loss: 0.3674 accuracy: 0.8387 val_loss: 0.1429 val_accuracy: 0.9490
Epoch: 16 loss: 0.3578 accuracy: 0.8415 val_loss: 0.1228 val_accuracy: 0.9513
Epoch: 17 loss: 0.3579 accuracy: 0.8424 val_loss: 0.1388 val_accuracy: 0.9422
Epoch: 18 loss: 0.3517 accuracy: 0.8478 val_loss: 0.1637 val_accuracy: 0.9366
Epoch: 19 loss: 0.3418 accuracy: 0.8474 val_loss: 0.1260 val_accuracy: 0.9513
Epoch: 20 loss: 0.3457 accuracy: 0.8463 val_loss: 0.1335 val_accuracy: 0.9547
Job ended!
