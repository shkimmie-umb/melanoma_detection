Tue 27 Feb 2024 12:20:58 PM EST
Python 3.9.7
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2019 NVIDIA Corporation
Built on Sun_Jul_28_19:07:16_PDT_2019
Cuda compilation tools, release 10.1, V10.1.243
My SLURM_ARRAY_TASK_ID: 
DB: ['PAD_UFES_20']
IMG_SIZE: [150, 150]
CLASSIFIER: EfficientNetB4
SELF_AUG: 1
JOB_INDEX: None
Combining...
Combining 1 db out of 1 dbs
Stacking training images
Stacking training labels
Stacking validation images
Stacking validation labels
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
efficientnetb4 (Functional)  (None, 1792)              17673823  
_________________________________________________________________
dense (Dense)                (None, 512)               918016    
_________________________________________________________________
dropout (Dropout)            (None, 512)               0         
_________________________________________________________________
batch_normalization (BatchNo (None, 512)               2048      
_________________________________________________________________
dense_1 (Dense)              (None, 256)               131328    
_________________________________________________________________
dropout_1 (Dropout)          (None, 256)               0         
_________________________________________________________________
batch_normalization_1 (Batch (None, 256)               1024      
_________________________________________________________________
dense_2 (Dense)              (None, 2)                 514       
=================================================================
Total params: 18,726,753
Trainable params: 1,051,394
Non-trainable params: 17,675,359
_________________________________________________________________
Fitting PAD_UFES_20_aug_EfficientNetB4_150h_150w_None model...
model_name: PAD_UFES_20_aug_EfficientNetB4_150h_150w_None
Epoch: 1 loss: 0.6653 accuracy: 0.6070 val_loss: 0.5979 val_accuracy: 0.9804
Epoch: 2 loss: 0.6064 accuracy: 0.7634 val_loss: 0.5106 val_accuracy: 0.9804
Epoch: 3 loss: 0.5553 accuracy: 0.8261 val_loss: 0.4368 val_accuracy: 0.9804
Epoch: 4 loss: 0.5171 accuracy: 0.8288 val_loss: 0.3670 val_accuracy: 0.9804
Epoch: 5 loss: 0.4907 accuracy: 0.8281 val_loss: 0.3154 val_accuracy: 0.9804
Epoch: 6 loss: 0.4731 accuracy: 0.8296 val_loss: 0.2818 val_accuracy: 0.9804
Epoch: 7 loss: 0.4630 accuracy: 0.8296 val_loss: 0.2427 val_accuracy: 0.9804
Epoch: 8 loss: 0.4579 accuracy: 0.8285 val_loss: 0.2471 val_accuracy: 0.9804
Epoch: 9 loss: 0.4556 accuracy: 0.8292 val_loss: 0.2107 val_accuracy: 0.9804
Epoch: 10 loss: 0.4525 accuracy: 0.8308 val_loss: 0.2293 val_accuracy: 0.9804
Epoch: 11 loss: 0.4549 accuracy: 0.8292 val_loss: 0.2248 val_accuracy: 0.9804
Epoch: 12 loss: 0.4515 accuracy: 0.8300 val_loss: 0.2015 val_accuracy: 0.9804
Epoch: 13 loss: 0.4545 accuracy: 0.8285 val_loss: 0.2401 val_accuracy: 0.9804
Epoch: 14 loss: 0.4503 accuracy: 0.8285 val_loss: 0.2010 val_accuracy: 0.9804
Epoch: 15 loss: 0.4529 accuracy: 0.8285 val_loss: 0.2640 val_accuracy: 0.9804
Epoch: 16 loss: 0.4508 accuracy: 0.8292 val_loss: 0.1908 val_accuracy: 0.9804
Epoch: 17 loss: 0.4460 accuracy: 0.8300 val_loss: 0.1910 val_accuracy: 0.9804
Epoch: 18 loss: 0.4480 accuracy: 0.8292 val_loss: 0.2201 val_accuracy: 0.9804
Epoch: 19 loss: 0.4514 accuracy: 0.8281 val_loss: 0.2397 val_accuracy: 0.9804
Epoch: 20 loss: 0.4484 accuracy: 0.8296 val_loss: 0.2087 val_accuracy: 0.9804
Job ended!
